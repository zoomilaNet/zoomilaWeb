/* tslint:disable */
/* eslint-disable */
/**
 * ای پی آی زومیلا
 * راهنمای استفاده از رابط برنامه نویسی نرم افزار زومیلا
 *
 * The version of the OpenAPI document: v1
 * Contact: jzabihi1980@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { StringStringKeyValuePair } from '../model';
/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary resources of data transfer objects
         * @param {'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto'} e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemResourceDtoEGet: async (e: 'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'e' is not null or undefined
            assertParamExists('apiSystemResourceDtoEGet', 'e', e)
            const localVarPath = `/api/System/Resource/Dto/{e}`
                .replace(`{${"e"}}`, encodeURIComponent(String(e)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resources of enums
         * @param {'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus'} e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemResourceEnumEGet: async (e: 'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'e' is not null or undefined
            assertParamExists('apiSystemResourceEnumEGet', 'e', e)
            const localVarPath = `/api/System/Resource/Enum/{e}`
                .replace(`{${"e"}}`, encodeURIComponent(String(e)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary resources of data transfer objects
         * @param {'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto'} e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSystemResourceDtoEGet(e: 'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StringStringKeyValuePair>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSystemResourceDtoEGet(e, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary resources of enums
         * @param {'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus'} e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSystemResourceEnumEGet(e: 'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StringStringKeyValuePair>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSystemResourceEnumEGet(e, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * 
         * @summary resources of data transfer objects
         * @param {'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto'} e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemResourceDtoEGet(e: 'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto', options?: any): AxiosPromise<Array<StringStringKeyValuePair>> {
            return localVarFp.apiSystemResourceDtoEGet(e, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary resources of enums
         * @param {'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus'} e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemResourceEnumEGet(e: 'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus', options?: any): AxiosPromise<Array<StringStringKeyValuePair>> {
            return localVarFp.apiSystemResourceEnumEGet(e, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - interface
 * @export
 * @interface SystemApi
 */
export interface SystemApiInterface {
    /**
     * 
     * @summary resources of data transfer objects
     * @param {'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto'} e 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    apiSystemResourceDtoEGet(e: 'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto', options?: AxiosRequestConfig): AxiosPromise<Array<StringStringKeyValuePair>>;

    /**
     * 
     * @summary resources of enums
     * @param {'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus'} e 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    apiSystemResourceEnumEGet(e: 'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus', options?: AxiosRequestConfig): AxiosPromise<Array<StringStringKeyValuePair>>;

}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI implements SystemApiInterface {
    /**
     * 
     * @summary resources of data transfer objects
     * @param {'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto'} e 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public apiSystemResourceDtoEGet(e: 'DtoList' | 'AccessForUpdateDto' | 'AccessToReturnDto' | 'ActiveAgencyToReturnDto' | 'AdAnalyticsDto' | 'AddressForCreateDto' | 'AddressToReturnDto' | 'AdHitsAnalyticsDto' | 'AdHitStaticDto' | 'AdsInProvince' | 'AdviserByAgencyForCreateDto' | 'AdviserForCreateDto' | 'AdviserForUpdateDto' | 'AdviserInformationToReturnDto' | 'AdviserToReturnDto' | 'AgencyActivityToReturnDto' | 'AgencyAdStatics' | 'AgencyAndCount' | 'AgencyClientToReturnDto' | 'AgencyDocumentForCreateDto' | 'AgencyForRegisterDto' | 'AgencyForUpdateDto' | 'AgencyMessageToReturnDto' | 'AgencyToReturnDto' | 'ApartmentToReturnDto' | 'ApkForCreationDto' | 'ApkToReturnDto' | 'BuildingPhotoDto' | 'BuildingToReturnDto' | 'CallInforamtionToReturnDto' | 'ChangePasswordDto' | 'CityDto' | 'ContractToReturnDto' | 'EmployeeForRegisterDto' | 'EmployeeToReturnDto' | 'ExistingFacilityDto' | 'FacilityDto' | 'FacilityForCreateDto' | 'FacilityToReturnDto' | 'ForgetPasswordDto' | 'ForSaleBuildingForCreateDto' | 'HelpDto' | 'LandlordForCreateDto' | 'LandlordToReturnDto' | 'LetForCreateDto' | 'LetToReturnDto' | 'LoginResultDto' | 'LogProps' | 'NeighbourhoodDto' | 'NeighbourhoodForCreateDto' | 'ProductsDto' | 'ProvinceDto' | 'RoleForCreateDto' | 'RoleForUpdateDto' | 'RoleToReturnDto' | 'ScoringDto' | 'SellForCreateDto' | 'SellToReturnDto' | 'ToRentBuildingForCreateDto' | 'UserForLoginDto' | 'VilaToReturnDto', options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).apiSystemResourceDtoEGet(e, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary resources of enums
     * @param {'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus'} e 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public apiSystemResourceEnumEGet(e: 'EnumList' | 'DtoList' | 'CheckoutStatus' | 'AdStatus' | 'PublishType' | 'PublishAction' | 'BuildingType' | 'ToRentCondition' | 'ForSaleCondition' | 'BuildingDocumentType' | 'BuildingUse' | 'Parking' | 'HeatingSystem' | 'KitchenUnit' | 'Flooring' | 'AgencyStatus' | 'HitName' | 'AdType' | 'MessageStatus', options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).apiSystemResourceEnumEGet(e, options).then((request) => request(this.axios, this.basePath));
    }
}
