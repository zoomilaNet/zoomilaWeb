/* tslint:disable */
/* eslint-disable */
/**
 * ای پی آی زومیلا
 * راهنمای استفاده از رابط برنامه نویسی نرم افزار زومیلا
 *
 * The version of the OpenAPI document: v1
 * Contact: jzabihi1980@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActiveAgencyToReturnDto } from '../model';
// @ts-ignore
import { AdsStatic } from '../model';
// @ts-ignore
import { AdvisersLanding } from '../model';
// @ts-ignore
import { AgencyClientToReturnDtoPagedListResultSET } from '../model';
// @ts-ignore
import { ApartmentToReturnDto } from '../model';
// @ts-ignore
import { CallInforamtionToReturnDtoResultSET } from '../model';
// @ts-ignore
import { LetAdDetail } from '../model';
// @ts-ignore
import { LetAdLanding } from '../model';
// @ts-ignore
import { SellAdDetail } from '../model';
// @ts-ignore
import { SellAdLanding } from '../model';
// @ts-ignore
import { VilaToReturnDto } from '../model';
/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary اطلاعات تماس آگهی
         * @param {number} adId 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsCallInformationAdIdGet: async (adId: number, adType?: 'sell' | 'let', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('apiClientsAdsCallInformationAdIdGet', 'adId', adId)
            const localVarPath = `/api/Clients/Ads/CallInformation/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جزيیات آگهی اجاره
         * @param {number} adId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetAdIdGet: async (adId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('apiClientsAdsLetAdIdGet', 'adId', adId)
            const localVarPath = `/api/Clients/Ads/Let/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جزییات آگهی اجاره با کد ساختمان
         * @param {number} buildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetBuildingBuildingIdGet: async (buildingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('apiClientsAdsLetBuildingBuildingIdGet', 'buildingId', buildingId)
            const localVarPath = `/api/Clients/Ads/Let/building/{buildingId}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد آگهی های اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Ads/Let/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آگهی های اجاره
         * @param {number} [cityId] 
         * @param {Array<number>} [neighbourhoodIds] 
         * @param {Array<string>} [buildingTypes] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetGet: async (cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Ads/Let`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cityId !== undefined) {
                localVarQueryParameter['CityId'] = cityId;
            }

            if (neighbourhoodIds) {
                localVarQueryParameter['NeighbourhoodIds'] = neighbourhoodIds;
            }

            if (buildingTypes) {
                localVarQueryParameter['BuildingTypes'] = buildingTypes;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جزيیات آگهی فروش
         * @param {number} adId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellAdIdGet: async (adId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('apiClientsAdsSellAdIdGet', 'adId', adId)
            const localVarPath = `/api/Clients/Ads/Sell/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جزییات آگهی فروش با کد ساختمان
         * @param {number} buildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellBuildingBuildingIdGet: async (buildingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('apiClientsAdsSellBuildingBuildingIdGet', 'buildingId', buildingId)
            const localVarPath = `/api/Clients/Ads/Sell/building/{buildingId}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد آگهی های فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Ads/Sell/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آگهی های فروش
         * @param {number} [cityId] 
         * @param {Array<number>} [neighbourhoodIds] 
         * @param {Array<string>} [buildingTypes] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellGet: async (cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Ads/Sell`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cityId !== undefined) {
                localVarQueryParameter['CityId'] = cityId;
            }

            if (neighbourhoodIds) {
                localVarQueryParameter['NeighbourhoodIds'] = neighbourhoodIds;
            }

            if (buildingTypes) {
                localVarQueryParameter['BuildingTypes'] = buildingTypes;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد مشاورین املاک
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Adviser/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آگهی های اجاره مشاور
         * @param {number} [adviserId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserLetGet: async (adviserId?: number, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Adviser/Let`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adviserId !== undefined) {
                localVarQueryParameter['AdviserId'] = adviserId;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آگهی های فروش مشاور
         * @param {number} [adviserId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserSellGet: async (adviserId?: number, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Adviser/Sell`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adviserId !== undefined) {
                localVarQueryParameter['AdviserId'] = adviserId;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار آگهی های اجاره مشاور
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserStaticLetAdviserIdGet: async (adviserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adviserId' is not null or undefined
            assertParamExists('apiClientsAdviserStaticLetAdviserIdGet', 'adviserId', adviserId)
            const localVarPath = `/api/Clients/Adviser/Static/Let/{adviserId}`
                .replace(`{${"adviserId"}}`, encodeURIComponent(String(adviserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار آگهی های فروش مشاور
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserStaticSellAdviserIdGet: async (adviserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adviserId' is not null or undefined
            assertParamExists('apiClientsAdviserStaticSellAdviserIdGet', 'adviserId', adviserId)
            const localVarPath = `/api/Clients/Adviser/Static/Sell/{adviserId}`
                .replace(`{${"adviserId"}}`, encodeURIComponent(String(adviserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آژانس های فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyActiveGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Agency/Active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست مشاوران یک آژانس
         * @param {number} [agencyId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyAdviserGet: async (agencyId?: number, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Agency/Adviser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (agencyId !== undefined) {
                localVarQueryParameter['AgencyId'] = agencyId;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد آژانس های املاک
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Agency/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary s  لیست آژانس ها
         * @param {number} [cityId] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyGet: async (cityId?: number, query?: string, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Agency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cityId !== undefined) {
                localVarQueryParameter['CityId'] = cityId;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary صفحه آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyLetAgencyIdGet: async (agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiClientsAgencyLetAgencyIdGet', 'agencyId', agencyId)
            const localVarPath = `/api/Clients/Agency/Let/{agencyId}`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary صفحه آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencySellAgencyIdGet: async (agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiClientsAgencySellAgencyIdGet', 'agencyId', agencyId)
            const localVarPath = `/api/Clients/Agency/Sell/{agencyId}`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyStaticLetAgencyIdGet: async (agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiClientsAgencyStaticLetAgencyIdGet', 'agencyId', agencyId)
            const localVarPath = `/api/Clients/Agency/Static/Let/{agencyId}`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyStaticSellAgencyIdGet: async (agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiClientsAgencyStaticSellAgencyIdGet', 'agencyId', agencyId)
            const localVarPath = `/api/Clients/Agency/Static/Sell/{agencyId}`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آپارتمان های منتخب در تهران سایر شهرستان های ایران جهت فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsApartmentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Apartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست شهر های محبوب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsCityPopularGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/City/Popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست محله های محبوب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsNeighbourhoodPopularGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Neighbourhood/Popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست اگهی های شمال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsVillaAdsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Villa/Ads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آژانس های فعال شمال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsVillaAgencyActiveGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Villa/Agency/Active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست ویلاهای منتخب جهت فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsVillasGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Clients/Villas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary اطلاعات تماس آگهی
         * @param {number} adId 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsCallInformationAdIdGet(adId: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallInforamtionToReturnDtoResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsCallInformationAdIdGet(adId, adType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary جزيیات آگهی اجاره
         * @param {number} adId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsLetAdIdGet(adId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LetAdDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsLetAdIdGet(adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary جزییات آگهی اجاره با کد ساختمان
         * @param {number} buildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsLetBuildingBuildingIdGet(buildingId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LetAdDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsLetBuildingBuildingIdGet(buildingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد آگهی های اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsLetCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsLetCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آگهی های اجاره
         * @param {number} [cityId] 
         * @param {Array<number>} [neighbourhoodIds] 
         * @param {Array<string>} [buildingTypes] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsLetGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LetAdLanding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsLetGet(cityId, neighbourhoodIds, buildingTypes, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary جزيیات آگهی فروش
         * @param {number} adId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsSellAdIdGet(adId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellAdDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsSellAdIdGet(adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary جزییات آگهی فروش با کد ساختمان
         * @param {number} buildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsSellBuildingBuildingIdGet(buildingId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellAdDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsSellBuildingBuildingIdGet(buildingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد آگهی های فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsSellCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsSellCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آگهی های فروش
         * @param {number} [cityId] 
         * @param {Array<number>} [neighbourhoodIds] 
         * @param {Array<string>} [buildingTypes] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdsSellGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellAdLanding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdsSellGet(cityId, neighbourhoodIds, buildingTypes, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد مشاورین املاک
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdviserCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdviserCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آگهی های اجاره مشاور
         * @param {number} [adviserId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdviserLetGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LetAdLanding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdviserLetGet(adviserId, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آگهی های فروش مشاور
         * @param {number} [adviserId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdviserSellGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellAdLanding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdviserSellGet(adviserId, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار آگهی های اجاره مشاور
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdviserStaticLetAdviserIdGet(adviserId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdsStatic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdviserStaticLetAdviserIdGet(adviserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار آگهی های فروش مشاور
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAdviserStaticSellAdviserIdGet(adviserId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdsStatic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAdviserStaticSellAdviserIdGet(adviserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آژانس های فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencyActiveGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActiveAgencyToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencyActiveGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست مشاوران یک آژانس
         * @param {number} [agencyId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencyAdviserGet(agencyId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdvisersLanding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencyAdviserGet(agencyId, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد آژانس های املاک
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencyCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencyCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary s  لیست آژانس ها
         * @param {number} [cityId] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencyGet(cityId?: number, query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyClientToReturnDtoPagedListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencyGet(cityId, query, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary صفحه آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencyLetAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LetAdLanding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencyLetAgencyIdGet(agencyId, order, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary صفحه آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencySellAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellAdLanding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencySellAgencyIdGet(agencyId, order, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencyStaticLetAgencyIdGet(agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdsStatic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencyStaticLetAgencyIdGet(agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsAgencyStaticSellAgencyIdGet(agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdsStatic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsAgencyStaticSellAgencyIdGet(agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آپارتمان های منتخب در تهران سایر شهرستان های ایران جهت فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsApartmentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApartmentToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsApartmentsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست شهر های محبوب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsCityPopularGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsCityPopularGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست محله های محبوب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsNeighbourhoodPopularGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsNeighbourhoodPopularGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست اگهی های شمال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsVillaAdsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsVillaAdsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آژانس های فعال شمال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsVillaAgencyActiveGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsVillaAgencyActiveGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست ویلاهای منتخب جهت فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClientsVillasGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VilaToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientsVillasGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @summary اطلاعات تماس آگهی
         * @param {number} adId 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsCallInformationAdIdGet(adId: number, adType?: 'sell' | 'let', options?: any): AxiosPromise<CallInforamtionToReturnDtoResultSET> {
            return localVarFp.apiClientsAdsCallInformationAdIdGet(adId, adType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جزيیات آگهی اجاره
         * @param {number} adId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetAdIdGet(adId: number, options?: any): AxiosPromise<LetAdDetail> {
            return localVarFp.apiClientsAdsLetAdIdGet(adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جزییات آگهی اجاره با کد ساختمان
         * @param {number} buildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetBuildingBuildingIdGet(buildingId: number, options?: any): AxiosPromise<LetAdDetail> {
            return localVarFp.apiClientsAdsLetBuildingBuildingIdGet(buildingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد آگهی های اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiClientsAdsLetCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آگهی های اجاره
         * @param {number} [cityId] 
         * @param {Array<number>} [neighbourhoodIds] 
         * @param {Array<string>} [buildingTypes] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsLetGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<LetAdLanding> {
            return localVarFp.apiClientsAdsLetGet(cityId, neighbourhoodIds, buildingTypes, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جزيیات آگهی فروش
         * @param {number} adId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellAdIdGet(adId: number, options?: any): AxiosPromise<SellAdDetail> {
            return localVarFp.apiClientsAdsSellAdIdGet(adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جزییات آگهی فروش با کد ساختمان
         * @param {number} buildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellBuildingBuildingIdGet(buildingId: number, options?: any): AxiosPromise<SellAdDetail> {
            return localVarFp.apiClientsAdsSellBuildingBuildingIdGet(buildingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد آگهی های فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiClientsAdsSellCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آگهی های فروش
         * @param {number} [cityId] 
         * @param {Array<number>} [neighbourhoodIds] 
         * @param {Array<string>} [buildingTypes] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdsSellGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<SellAdLanding> {
            return localVarFp.apiClientsAdsSellGet(cityId, neighbourhoodIds, buildingTypes, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد مشاورین املاک
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiClientsAdviserCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آگهی های اجاره مشاور
         * @param {number} [adviserId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserLetGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<LetAdLanding> {
            return localVarFp.apiClientsAdviserLetGet(adviserId, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آگهی های فروش مشاور
         * @param {number} [adviserId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserSellGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<SellAdLanding> {
            return localVarFp.apiClientsAdviserSellGet(adviserId, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار آگهی های اجاره مشاور
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserStaticLetAdviserIdGet(adviserId: number, options?: any): AxiosPromise<Array<AdsStatic>> {
            return localVarFp.apiClientsAdviserStaticLetAdviserIdGet(adviserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار آگهی های فروش مشاور
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAdviserStaticSellAdviserIdGet(adviserId: number, options?: any): AxiosPromise<Array<AdsStatic>> {
            return localVarFp.apiClientsAdviserStaticSellAdviserIdGet(adviserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آژانس های فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyActiveGet(options?: any): AxiosPromise<Array<ActiveAgencyToReturnDto>> {
            return localVarFp.apiClientsAgencyActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست مشاوران یک آژانس
         * @param {number} [agencyId] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyAdviserGet(agencyId?: number, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<AdvisersLanding> {
            return localVarFp.apiClientsAgencyAdviserGet(agencyId, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد آژانس های املاک
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiClientsAgencyCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary s  لیست آژانس ها
         * @param {number} [cityId] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyGet(cityId?: number, query?: string, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<AgencyClientToReturnDtoPagedListResultSET> {
            return localVarFp.apiClientsAgencyGet(cityId, query, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary صفحه آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyLetAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: any): AxiosPromise<LetAdLanding> {
            return localVarFp.apiClientsAgencyLetAgencyIdGet(agencyId, order, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary صفحه آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencySellAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: any): AxiosPromise<SellAdLanding> {
            return localVarFp.apiClientsAgencySellAgencyIdGet(agencyId, order, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyStaticLetAgencyIdGet(agencyId: number, options?: any): AxiosPromise<Array<AdsStatic>> {
            return localVarFp.apiClientsAgencyStaticLetAgencyIdGet(agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsAgencyStaticSellAgencyIdGet(agencyId: number, options?: any): AxiosPromise<Array<AdsStatic>> {
            return localVarFp.apiClientsAgencyStaticSellAgencyIdGet(agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آپارتمان های منتخب در تهران سایر شهرستان های ایران جهت فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsApartmentsGet(options?: any): AxiosPromise<Array<ApartmentToReturnDto>> {
            return localVarFp.apiClientsApartmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست شهر های محبوب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsCityPopularGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiClientsCityPopularGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست محله های محبوب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsNeighbourhoodPopularGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiClientsNeighbourhoodPopularGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست اگهی های شمال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsVillaAdsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiClientsVillaAdsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آژانس های فعال شمال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsVillaAgencyActiveGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiClientsVillaAgencyActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست ویلاهای منتخب جهت فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClientsVillasGet(options?: any): AxiosPromise<Array<VilaToReturnDto>> {
            return localVarFp.apiClientsVillasGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - interface
 * @export
 * @interface ClientsApi
 */
export interface ClientsApiInterface {
    /**
     * 
     * @summary اطلاعات تماس آگهی
     * @param {number} adId 
     * @param {'sell' | 'let'} [adType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsCallInformationAdIdGet(adId: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig): AxiosPromise<CallInforamtionToReturnDtoResultSET>;

    /**
     * 
     * @summary جزيیات آگهی اجاره
     * @param {number} adId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsLetAdIdGet(adId: number, options?: AxiosRequestConfig): AxiosPromise<LetAdDetail>;

    /**
     * 
     * @summary جزییات آگهی اجاره با کد ساختمان
     * @param {number} buildingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsLetBuildingBuildingIdGet(buildingId: number, options?: AxiosRequestConfig): AxiosPromise<LetAdDetail>;

    /**
     * 
     * @summary تعداد آگهی های اجاره
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsLetCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary لیست آگهی های اجاره
     * @param {number} [cityId] 
     * @param {Array<number>} [neighbourhoodIds] 
     * @param {Array<string>} [buildingTypes] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsLetGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<LetAdLanding>;

    /**
     * 
     * @summary جزيیات آگهی فروش
     * @param {number} adId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsSellAdIdGet(adId: number, options?: AxiosRequestConfig): AxiosPromise<SellAdDetail>;

    /**
     * 
     * @summary جزییات آگهی فروش با کد ساختمان
     * @param {number} buildingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsSellBuildingBuildingIdGet(buildingId: number, options?: AxiosRequestConfig): AxiosPromise<SellAdDetail>;

    /**
     * 
     * @summary تعداد آگهی های فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsSellCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary لیست آگهی های فروش
     * @param {number} [cityId] 
     * @param {Array<number>} [neighbourhoodIds] 
     * @param {Array<string>} [buildingTypes] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdsSellGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<SellAdLanding>;

    /**
     * 
     * @summary تعداد مشاورین املاک
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdviserCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary لیست آگهی های اجاره مشاور
     * @param {number} [adviserId] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdviserLetGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<LetAdLanding>;

    /**
     * 
     * @summary لیست آگهی های فروش مشاور
     * @param {number} [adviserId] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdviserSellGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<SellAdLanding>;

    /**
     * 
     * @summary آمار آگهی های اجاره مشاور
     * @param {number} adviserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdviserStaticLetAdviserIdGet(adviserId: number, options?: AxiosRequestConfig): AxiosPromise<Array<AdsStatic>>;

    /**
     * 
     * @summary آمار آگهی های فروش مشاور
     * @param {number} adviserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAdviserStaticSellAdviserIdGet(adviserId: number, options?: AxiosRequestConfig): AxiosPromise<Array<AdsStatic>>;

    /**
     * 
     * @summary لیست آژانس های فعال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencyActiveGet(options?: AxiosRequestConfig): AxiosPromise<Array<ActiveAgencyToReturnDto>>;

    /**
     * 
     * @summary لیست مشاوران یک آژانس
     * @param {number} [agencyId] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencyAdviserGet(agencyId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<AdvisersLanding>;

    /**
     * 
     * @summary تعداد آژانس های املاک
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencyCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary s  لیست آژانس ها
     * @param {number} [cityId] 
     * @param {string} [query] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencyGet(cityId?: number, query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<AgencyClientToReturnDtoPagedListResultSET>;

    /**
     * 
     * @summary صفحه آگهی های اجاره آژانس
     * @param {number} agencyId 
     * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencyLetAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<LetAdLanding>;

    /**
     * 
     * @summary صفحه آگهی های فروش آژانس
     * @param {number} agencyId 
     * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencySellAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<SellAdLanding>;

    /**
     * 
     * @summary آمار آگهی های اجاره آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencyStaticLetAgencyIdGet(agencyId: number, options?: AxiosRequestConfig): AxiosPromise<Array<AdsStatic>>;

    /**
     * 
     * @summary آمار آگهی های فروش آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsAgencyStaticSellAgencyIdGet(agencyId: number, options?: AxiosRequestConfig): AxiosPromise<Array<AdsStatic>>;

    /**
     * 
     * @summary لیست آپارتمان های منتخب در تهران سایر شهرستان های ایران جهت فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsApartmentsGet(options?: AxiosRequestConfig): AxiosPromise<Array<ApartmentToReturnDto>>;

    /**
     * 
     * @summary لیست شهر های محبوب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsCityPopularGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لیست محله های محبوب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsNeighbourhoodPopularGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لیست اگهی های شمال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsVillaAdsGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لیست آژانس های فعال شمال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsVillaAgencyActiveGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لیست ویلاهای منتخب جهت فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApiInterface
     */
    apiClientsVillasGet(options?: AxiosRequestConfig): AxiosPromise<Array<VilaToReturnDto>>;

}

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI implements ClientsApiInterface {
    /**
     * 
     * @summary اطلاعات تماس آگهی
     * @param {number} adId 
     * @param {'sell' | 'let'} [adType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsCallInformationAdIdGet(adId: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsCallInformationAdIdGet(adId, adType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جزيیات آگهی اجاره
     * @param {number} adId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsLetAdIdGet(adId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsLetAdIdGet(adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جزییات آگهی اجاره با کد ساختمان
     * @param {number} buildingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsLetBuildingBuildingIdGet(buildingId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsLetBuildingBuildingIdGet(buildingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد آگهی های اجاره
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsLetCountGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsLetCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آگهی های اجاره
     * @param {number} [cityId] 
     * @param {Array<number>} [neighbourhoodIds] 
     * @param {Array<string>} [buildingTypes] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsLetGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsLetGet(cityId, neighbourhoodIds, buildingTypes, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جزيیات آگهی فروش
     * @param {number} adId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsSellAdIdGet(adId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsSellAdIdGet(adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جزییات آگهی فروش با کد ساختمان
     * @param {number} buildingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsSellBuildingBuildingIdGet(buildingId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsSellBuildingBuildingIdGet(buildingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد آگهی های فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsSellCountGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsSellCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آگهی های فروش
     * @param {number} [cityId] 
     * @param {Array<number>} [neighbourhoodIds] 
     * @param {Array<string>} [buildingTypes] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdsSellGet(cityId?: number, neighbourhoodIds?: Array<number>, buildingTypes?: Array<string>, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdsSellGet(cityId, neighbourhoodIds, buildingTypes, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد مشاورین املاک
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdviserCountGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdviserCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آگهی های اجاره مشاور
     * @param {number} [adviserId] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdviserLetGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdviserLetGet(adviserId, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آگهی های فروش مشاور
     * @param {number} [adviserId] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdviserSellGet(adviserId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdviserSellGet(adviserId, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار آگهی های اجاره مشاور
     * @param {number} adviserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdviserStaticLetAdviserIdGet(adviserId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdviserStaticLetAdviserIdGet(adviserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار آگهی های فروش مشاور
     * @param {number} adviserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAdviserStaticSellAdviserIdGet(adviserId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAdviserStaticSellAdviserIdGet(adviserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آژانس های فعال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencyActiveGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencyActiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست مشاوران یک آژانس
     * @param {number} [agencyId] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencyAdviserGet(agencyId?: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencyAdviserGet(agencyId, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد آژانس های املاک
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencyCountGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencyCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary s  لیست آژانس ها
     * @param {number} [cityId] 
     * @param {string} [query] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencyGet(cityId?: number, query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencyGet(cityId, query, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary صفحه آگهی های اجاره آژانس
     * @param {number} agencyId 
     * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencyLetAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencyLetAgencyIdGet(agencyId, order, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary صفحه آگهی های فروش آژانس
     * @param {number} agencyId 
     * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencySellAgencyIdGet(agencyId: number, order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencySellAgencyIdGet(agencyId, order, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار آگهی های اجاره آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencyStaticLetAgencyIdGet(agencyId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencyStaticLetAgencyIdGet(agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار آگهی های فروش آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsAgencyStaticSellAgencyIdGet(agencyId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsAgencyStaticSellAgencyIdGet(agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آپارتمان های منتخب در تهران سایر شهرستان های ایران جهت فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsApartmentsGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsApartmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست شهر های محبوب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsCityPopularGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsCityPopularGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست محله های محبوب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsNeighbourhoodPopularGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsNeighbourhoodPopularGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست اگهی های شمال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsVillaAdsGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsVillaAdsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آژانس های فعال شمال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsVillaAgencyActiveGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsVillaAgencyActiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست ویلاهای منتخب جهت فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public apiClientsVillasGet(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).apiClientsVillasGet(options).then((request) => request(this.axios, this.basePath));
    }
}
