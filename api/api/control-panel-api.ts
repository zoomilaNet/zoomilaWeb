/* tslint:disable */
/* eslint-disable */
/**
 * ای پی آی زومیلا
 * راهنمای استفاده از رابط برنامه نویسی نرم افزار زومیلا
 *
 * The version of the OpenAPI document: v1
 * Contact: jzabihi1980@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessForUpdateDto } from '../model';
// @ts-ignore
import { AccessToReturnDto } from '../model';
// @ts-ignore
import { AccessToReturnDtoListResultSET } from '../model';
// @ts-ignore
import { AdsInProvince } from '../model';
// @ts-ignore
import { AdviserToReturnDto } from '../model';
// @ts-ignore
import { AgencyAndCount } from '../model';
// @ts-ignore
import { AgencyRes } from '../model';
// @ts-ignore
import { AgencyResPagedList } from '../model';
// @ts-ignore
import { AgencyToReturnDtoPagedList } from '../model';
// @ts-ignore
import { AgencyToReturnDtoPagedListResultSET } from '../model';
// @ts-ignore
import { ContractToReturnDtoResultSET } from '../model';
// @ts-ignore
import { CreatePackageReq } from '../model';
// @ts-ignore
import { EmployeeToReturnDto } from '../model';
// @ts-ignore
import { EmployeeToReturnDtoPagedList } from '../model';
// @ts-ignore
import { EmployeeToReturnDtoPagedListResultSET } from '../model';
// @ts-ignore
import { GroupToReturnDto } from '../model';
// @ts-ignore
import { LetToReturnDtoPagedList } from '../model';
// @ts-ignore
import { LoginResultDto } from '../model';
// @ts-ignore
import { PackageToReturnDto } from '../model';
// @ts-ignore
import { PackageToReturnDtoPagedList } from '../model';
// @ts-ignore
import { ProblemDetails } from '../model';
// @ts-ignore
import { ProductsToReturnDto } from '../model';
// @ts-ignore
import { RoleForCreateDto } from '../model';
// @ts-ignore
import { RoleForUpdateDto } from '../model';
// @ts-ignore
import { RoleToReturnDto } from '../model';
// @ts-ignore
import { SellToReturnDtoPagedList } from '../model';
// @ts-ignore
import { StringResultSET } from '../model';
// @ts-ignore
import { UserForLoginDto } from '../model';
/**
 * ControlPanelApi - axios parameter creator
 * @export
 */
export const ControlPanelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary دریافت یک دسترسی با کد
         * @param {number} accessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessAccessIdGet: async (accessId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessId' is not null or undefined
            assertParamExists('apiControlPanelAccessAccessIdGet', 'accessId', accessId)
            const localVarPath = `/api/ControlPanel/Access/{accessId}`
                .replace(`{${"accessId"}}`, encodeURIComponent(String(accessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف دسترسی از یک نقش
         * @param {number} accessId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessAccessIdRoleIdDelete: async (accessId: number, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessId' is not null or undefined
            assertParamExists('apiControlPanelAccessAccessIdRoleIdDelete', 'accessId', accessId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiControlPanelAccessAccessIdRoleIdDelete', 'roleId', roleId)
            const localVarPath = `/api/ControlPanel/Access/{accessId}/{roleId}`
                .replace(`{${"accessId"}}`, encodeURIComponent(String(accessId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary اختصاص دسترسی به نقش
         * @param {number} accessId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessAccessIdRoleIdPatch: async (accessId: number, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessId' is not null or undefined
            assertParamExists('apiControlPanelAccessAccessIdRoleIdPatch', 'accessId', accessId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiControlPanelAccessAccessIdRoleIdPatch', 'roleId', roleId)
            const localVarPath = `/api/ControlPanel/Access/{accessId}/{roleId}`
                .replace(`{${"accessId"}}`, encodeURIComponent(String(accessId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست کلیه دسترسی ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Access/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست دسترسی های یک نقش
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessListRoleIdGet: async (roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiControlPanelAccessListRoleIdGet', 'roleId', roleId)
            const localVarPath = `/api/ControlPanel/Access/List/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ویرایش یک دسترسی
         * @param {AccessForUpdateDto} [accessForUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessPut: async (accessForUpdateDto?: AccessForUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessForUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAddMainBannerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/AddMainBanner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAddProjectGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/AddProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAddSideBannerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/AddSideBanner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل اگهی های اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsLetCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Let/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل آگهی های اجاره در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsLetPendingCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Let/Pending/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل اگهی های منتشر شده اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsLetPublishedCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Let/Published/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل اگهی های در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsPendingCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Pending/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار تعداد آگهی در هر استان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsProvinceStaticGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Province/Static`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد آگهی های فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSellCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Sell/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل آگهی های فروش در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSellPendingCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Sell/Pending/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل اگهی های فروش منتشر شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSellPublishedCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Sell/Published/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل اگهی های رد شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSkipCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Ads/Skip/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary امار آژانس ها در استان ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgenciesProvinceStaticGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Agencies/Province/Static`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد آژانس های فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyActiveCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Agency/Active/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyActivityLogGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/AgencyActivityLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdAdsLetGet: async (agencyId: number, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelAgencyAgencyIdAdsLetGet', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Agency/{agencyId}/Ads/Let`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdAdsSellGet: async (agencyId: number, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelAgencyAgencyIdAdsSellGet', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Agency/{agencyId}/Ads/Sell`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست مشاوران یک آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdAdvisersGet: async (agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelAgencyAgencyIdAdvisersGet', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Agency/{agencyId}/Advisers`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قرارداد آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdContractGet: async (agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelAgencyAgencyIdContractGet', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Agency/{agencyId}/Contract`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست گروه های آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdGroupsGet: async (agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelAgencyAgencyIdGroupsGet', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Agency/{agencyId}/Groups`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آژانس
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiControlPanelAgencyIdGet', 'id', id)
            const localVarPath = `/api/ControlPanel/Agency/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آژانس ها
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyListGet: async (currentPage?: number, pageSize?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Agency/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ارسال پیام به کارشناس
         * @param {number} adviserId 
         * @param {string} [title] 
         * @param {string} [message] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyMessageAdviserIdPost: async (adviserId: number, title?: string, message?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adviserId' is not null or undefined
            assertParamExists('apiControlPanelAgencyMessageAdviserIdPost', 'adviserId', adviserId)
            const localVarPath = `/api/ControlPanel/Agency/Message/{adviserId}`
                .replace(`{${"adviserId"}}`, encodeURIComponent(String(adviserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (message !== undefined) { 
                localVarFormParams.append('message', message as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد آژانس های رد شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyNotVerifiedCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Agency/NotVerified/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آژانس های تایید نشده
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyNotVerifiedListGet: async (currentPage?: number, pageSize?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Agency/NotVerified/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد آژانس های در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyPendingCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Agency/Pending/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary عقد قرارداد برای آژانس
         * @param {number} [agencyId] کد آژانس
         * @param {number} [packageId] کد بسته
         * @param {number} [duration] مدت اعتبار
         * @param {string} [price] قیمت تمام شده
         * @param {string} [description] توضیحات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyRegisterContractPost: async (agencyId?: number, packageId?: number, duration?: number, price?: string, description?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Agency/Register/Contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (agencyId !== undefined) { 
                localVarFormParams.append('AgencyId', agencyId as any);
            }
    
            if (packageId !== undefined) { 
                localVarFormParams.append('PackageId', packageId as any);
            }
    
            if (duration !== undefined) { 
                localVarFormParams.append('Duration', duration as any);
            }
    
            if (price !== undefined) { 
                localVarFormParams.append('Price', price as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تایید آژانس توسط پرسنل
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyVerifyAgencyIdPatch: async (agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelAgencyVerifyAgencyIdPatch', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Agency/Verify/{agencyId}`
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary اپلود ورژن جدید اپ
         * @param {string} [versionName] Version Name
         * @param {string} [versionNumber] Version Number
         * @param {boolean} [required] Required
         * @param {any} [path] Path
         * @param {string} [notes] Notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelApkUploadPost: async (versionName?: string, versionNumber?: string, required?: boolean, path?: any, notes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Apk/Upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (versionName !== undefined) { 
                localVarFormParams.append('VersionName', versionName as any);
            }
    
            if (versionNumber !== undefined) { 
                localVarFormParams.append('VersionNumber', versionNumber as any);
            }
    
            if (required !== undefined) { 
                localVarFormParams.append('Required', required as any);
            }
    
            if (path !== undefined) { 
                localVarFormParams.append('Path', path as any);
            }
    
            if (notes !== undefined) { 
                localVarFormParams.append('Notes', notes as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeActivityLogGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/EmployeeActivityLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary پرسنل
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiControlPanelEmployeeIdGet', 'id', id)
            const localVarPath = `/api/ControlPanel/Employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست پرسنل
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeListGet: async (currentPage?: number, pageSize?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Employee/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ورود
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeLoginPost: async (userForLoginDto?: UserForLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Employee/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت نام کارمند جدید
         * @param {number} [roleId] کد نقش
         * @param {string} [fullName] نام کامل
         * @param {string} [email] ایمیل
         * @param {string} [password] رمز
         * @param {string} [mobile] موبایل
         * @param {any} [profile] تصویر
         * @param {string} [born] تاریخ تولد
         * @param {string} [ncode] کد ملی
         * @param {string} [phone] تلفن
         * @param {string} [address] آدرس
         * @param {string} [city] شهر
         * @param {string} [province] استان
         * @param {string} [gender] جنسیت
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeRegisterPost: async (roleId?: number, fullName?: string, email?: string, password?: string, mobile?: string, profile?: any, born?: string, ncode?: string, phone?: string, address?: string, city?: string, province?: string, gender?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Employee/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (roleId !== undefined) { 
                localVarFormParams.append('RoleId', roleId as any);
            }
    
            if (fullName !== undefined) { 
                localVarFormParams.append('FullName', fullName as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('Password', password as any);
            }
    
            if (mobile !== undefined) { 
                localVarFormParams.append('Mobile', mobile as any);
            }
    
            if (profile !== undefined) { 
                localVarFormParams.append('Profile', profile as any);
            }
    
            if (born !== undefined) { 
                localVarFormParams.append('Born', born as any);
            }
    
            if (ncode !== undefined) { 
                localVarFormParams.append('Ncode', ncode as any);
            }
    
            if (phone !== undefined) { 
                localVarFormParams.append('Phone', phone as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (city !== undefined) { 
                localVarFormParams.append('City', city as any);
            }
    
            if (province !== undefined) { 
                localVarFormParams.append('Province', province as any);
            }
    
            if (gender !== undefined) { 
                localVarFormParams.append('Gender', gender as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetCityListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/GetCityList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetFollowUpListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/GetFollowUpList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetMainBannerListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/GetMainBannerList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetPendingAdGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/GetPendingAd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetProjectListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/GetProjectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetSideBannerListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/GetSideBannerList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetSkippedAdGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/GetSkippedAd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupGroupIdPut: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupGroupIdPut', 'groupId', groupId)
            const localVarPath = `/api/ControlPanel/Group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست زمینه فعالیت گروه ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsContextListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Groups/Context/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف آژانس از گروه
         * @param {number} groupId 
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdAgencyAgencyIdDelete: async (groupId: number, agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdAgencyAgencyIdDelete', 'groupId', groupId)
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdAgencyAgencyIdDelete', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Groups/{groupId}/Agency/{agencyId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary افزودن آژانس به گروه
         * @param {number} groupId 
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdAgencyAgencyIdPost: async (groupId: number, agencyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdAgencyAgencyIdPost', 'groupId', groupId)
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdAgencyAgencyIdPost', 'agencyId', agencyId)
            const localVarPath = `/api/ControlPanel/Groups/{groupId}/Agency/{agencyId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"agencyId"}}`, encodeURIComponent(String(agencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آژانس های یک گروها
         * @param {number} groupId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdAgencyListGet: async (groupId: number, currentPage?: number, pageSize?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdAgencyListGet', 'groupId', groupId)
            const localVarPath = `/api/ControlPanel/Groups/{groupId}/Agency/List`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdDelete: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdDelete', 'groupId', groupId)
            const localVarPath = `/api/ControlPanel/Groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف پرسنل از گروه
         * @param {number} groupId 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete: async (groupId: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete', 'groupId', groupId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete', 'employeeId', employeeId)
            const localVarPath = `/api/ControlPanel/Groups/{groupId}/Employee/{employeeId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary افزودن پرسنل به گروه
         * @param {number} groupId 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost: async (groupId: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost', 'groupId', groupId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost', 'employeeId', employeeId)
            const localVarPath = `/api/ControlPanel/Groups/{groupId}/Employee/{employeeId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست پرسنل یک گروه
         * @param {number} groupId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdEmployeeListGet: async (groupId: number, currentPage?: number, pageSize?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiControlPanelGroupsGroupIdEmployeeListGet', 'groupId', groupId)
            const localVarPath = `/api/ControlPanel/Groups/{groupId}/Employee/List`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست گروه ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Groups/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelInsertedAdStaticsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/InsertedAdStatics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelInsertedAdStatusStaticsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/InsertedAdStatusStatics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelManageDistrictGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/ManageDistrict`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelMergeNeighbourHoodsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/MergeNeighbourHoods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelMoveNeighbourHoodsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/MoveNeighbourHoods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary افزودن بسته
         * @param {string} [packageName] نام بسته
         * @param {boolean} [active] فعال
         * @param {number} [duration] ماه
         * @param {string} [price] قیمت
         * @param {Array<CreatePackageReq>} [createPackageReq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelPackageCreatePost: async (packageName?: string, active?: boolean, duration?: number, price?: string, createPackageReq?: Array<CreatePackageReq>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Package/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (packageName !== undefined) {
                localVarQueryParameter['PackageName'] = packageName;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            if (duration !== undefined) {
                localVarQueryParameter['Duration'] = duration;
            }

            if (price !== undefined) {
                localVarQueryParameter['Price'] = price;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPackageReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست پکیج ها
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {'Active' | 'Inactive'} [type] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelPackageGet: async (order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', type?: 'Active' | 'Inactive', currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف بسته
         * @param {number} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelPackagePackageIdDelete: async (packageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('apiControlPanelPackagePackageIdDelete', 'packageId', packageId)
            const localVarPath = `/api/ControlPanel/Package/{packageId}`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary محصولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelProductGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تصویر کیو آر کد
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelQrCodeImageAdviserIdGet: async (adviserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adviserId' is not null or undefined
            assertParamExists('apiControlPanelQrCodeImageAdviserIdGet', 'adviserId', adviserId)
            const localVarPath = `/api/ControlPanel/QrCode/Image/{adviserId}`
                .replace(`{${"adviserId"}}`, encodeURIComponent(String(adviserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRegistredAgencyStaticsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/RegistredAgencyStatics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست نقش ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRoleListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Role/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت یک نقش جدید
         * @param {RoleForCreateDto} [roleForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRolePost: async (roleForCreateDto?: RoleForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ویرایش یک نقش
         * @param {RoleForUpdateDto} [roleForUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRolePut: async (roleForUpdateDto?: RoleForUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleForUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست کاربران با کد نقش
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRoleRoleIdEmployeesGet: async (roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiControlPanelRoleRoleIdEmployeesGet', 'roleId', roleId)
            const localVarPath = `/api/ControlPanel/Role/{roleId}/Employees`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary دریافت یک نقش با کد
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRoleRoleIdGet: async (roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiControlPanelRoleRoleIdGet', 'roleId', roleId)
            const localVarPath = `/api/ControlPanel/Role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelSiteMapGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/SiteMap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelTestGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ControlPanel/Test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ControlPanelApi - functional programming interface
 * @export
 */
export const ControlPanelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ControlPanelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary دریافت یک دسترسی با کد
         * @param {number} accessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAccessAccessIdGet(accessId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToReturnDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAccessAccessIdGet(accessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف دسترسی از یک نقش
         * @param {number} accessId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAccessAccessIdRoleIdDelete(accessId: number, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAccessAccessIdRoleIdDelete(accessId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary اختصاص دسترسی به نقش
         * @param {number} accessId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAccessAccessIdRoleIdPatch(accessId: number, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAccessAccessIdRoleIdPatch(accessId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست کلیه دسترسی ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAccessListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToReturnDtoListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAccessListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست دسترسی های یک نقش
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAccessListRoleIdGet(roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToReturnDtoListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAccessListRoleIdGet(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ویرایش یک دسترسی
         * @param {AccessForUpdateDto} [accessForUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAccessPut(accessForUpdateDto?: AccessForUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAccessPut(accessForUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAddMainBannerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAddMainBannerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAddProjectGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAddProjectGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAddSideBannerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAddSideBannerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل اگهی های اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsLetCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsLetCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل آگهی های اجاره در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsLetPendingCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsLetPendingCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل اگهی های منتشر شده اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsLetPublishedCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsLetPublishedCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل اگهی های در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsPendingCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsPendingCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار تعداد آگهی در هر استان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsProvinceStaticGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdsInProvince>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsProvinceStaticGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد آگهی های فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsSellCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsSellCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل آگهی های فروش در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsSellPendingCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsSellPendingCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل اگهی های فروش منتشر شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsSellPublishedCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsSellPublishedCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل اگهی های رد شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAdsSkipCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAdsSkipCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary امار آژانس ها در استان ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgenciesProvinceStaticGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgencyAndCount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgenciesProvinceStaticGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد آژانس های فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyActiveCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyActiveCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyActivityLogGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyActivityLogGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyAgencyIdAdsLetGet(agencyId: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LetToReturnDtoPagedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyAgencyIdAdsLetGet(agencyId, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyAgencyIdAdsSellGet(agencyId: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellToReturnDtoPagedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyAgencyIdAdsSellGet(agencyId, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست مشاوران یک آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyAgencyIdAdvisersGet(agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdviserToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyAgencyIdAdvisersGet(agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary قرارداد آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyAgencyIdContractGet(agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractToReturnDtoResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyAgencyIdContractGet(agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست گروه های آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyAgencyIdGroupsGet(agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyAgencyIdGroupsGet(agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آژانس
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آژانس ها
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyResPagedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyListGet(currentPage, pageSize, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ارسال پیام به کارشناس
         * @param {number} adviserId 
         * @param {string} [title] 
         * @param {string} [message] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyMessageAdviserIdPost(adviserId: number, title?: string, message?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyMessageAdviserIdPost(adviserId, title, message, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد آژانس های رد شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyNotVerifiedCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyNotVerifiedCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آژانس های تایید نشده
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyNotVerifiedListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyToReturnDtoPagedListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyNotVerifiedListGet(currentPage, pageSize, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد آژانس های در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyPendingCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyPendingCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary عقد قرارداد برای آژانس
         * @param {number} [agencyId] کد آژانس
         * @param {number} [packageId] کد بسته
         * @param {number} [duration] مدت اعتبار
         * @param {string} [price] قیمت تمام شده
         * @param {string} [description] توضیحات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyRegisterContractPost(agencyId?: number, packageId?: number, duration?: number, price?: string, description?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyRegisterContractPost(agencyId, packageId, duration, price, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تایید آژانس توسط پرسنل
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelAgencyVerifyAgencyIdPatch(agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelAgencyVerifyAgencyIdPatch(agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary اپلود ورژن جدید اپ
         * @param {string} [versionName] Version Name
         * @param {string} [versionNumber] Version Number
         * @param {boolean} [required] Required
         * @param {any} [path] Path
         * @param {string} [notes] Notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelApkUploadPost(versionName?: string, versionNumber?: string, required?: boolean, path?: any, notes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelApkUploadPost(versionName, versionNumber, required, path, notes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelEmployeeActivityLogGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelEmployeeActivityLogGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary پرسنل
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelEmployeeIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeToReturnDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelEmployeeIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست پرسنل
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelEmployeeListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeToReturnDtoPagedListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelEmployeeListGet(currentPage, pageSize, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ورود
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelEmployeeLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelEmployeeLoginPost(userForLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت نام کارمند جدید
         * @param {number} [roleId] کد نقش
         * @param {string} [fullName] نام کامل
         * @param {string} [email] ایمیل
         * @param {string} [password] رمز
         * @param {string} [mobile] موبایل
         * @param {any} [profile] تصویر
         * @param {string} [born] تاریخ تولد
         * @param {string} [ncode] کد ملی
         * @param {string} [phone] تلفن
         * @param {string} [address] آدرس
         * @param {string} [city] شهر
         * @param {string} [province] استان
         * @param {string} [gender] جنسیت
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelEmployeeRegisterPost(roleId?: number, fullName?: string, email?: string, password?: string, mobile?: string, profile?: any, born?: string, ncode?: string, phone?: string, address?: string, city?: string, province?: string, gender?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelEmployeeRegisterPost(roleId, fullName, email, password, mobile, profile, born, ncode, phone, address, city, province, gender, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGetCityListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGetCityListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGetFollowUpListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGetFollowUpListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGetMainBannerListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGetMainBannerListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGetPendingAdGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGetPendingAdGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGetProjectListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGetProjectListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGetSideBannerListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGetSideBannerListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGetSkippedAdGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGetSkippedAdGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupGroupIdPut(groupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupGroupIdPut(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست زمینه فعالیت گروه ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsContextListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsContextListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف آژانس از گروه
         * @param {number} groupId 
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsGroupIdAgencyAgencyIdDelete(groupId: number, agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsGroupIdAgencyAgencyIdDelete(groupId, agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary افزودن آژانس به گروه
         * @param {number} groupId 
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsGroupIdAgencyAgencyIdPost(groupId: number, agencyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsGroupIdAgencyAgencyIdPost(groupId, agencyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آژانس های یک گروها
         * @param {number} groupId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsGroupIdAgencyListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyToReturnDtoPagedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsGroupIdAgencyListGet(groupId, currentPage, pageSize, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsGroupIdDelete(groupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsGroupIdDelete(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف پرسنل از گروه
         * @param {number} groupId 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete(groupId: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete(groupId, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary افزودن پرسنل به گروه
         * @param {number} groupId 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost(groupId: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost(groupId, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست پرسنل یک گروه
         * @param {number} groupId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsGroupIdEmployeeListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeToReturnDtoPagedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsGroupIdEmployeeListGet(groupId, currentPage, pageSize, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست گروه ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelGroupsPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelGroupsPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelInsertedAdStaticsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelInsertedAdStaticsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelInsertedAdStatusStaticsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelInsertedAdStatusStaticsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelManageDistrictGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelManageDistrictGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelMergeNeighbourHoodsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelMergeNeighbourHoodsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelMoveNeighbourHoodsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelMoveNeighbourHoodsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary افزودن بسته
         * @param {string} [packageName] نام بسته
         * @param {boolean} [active] فعال
         * @param {number} [duration] ماه
         * @param {string} [price] قیمت
         * @param {Array<CreatePackageReq>} [createPackageReq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelPackageCreatePost(packageName?: string, active?: boolean, duration?: number, price?: string, createPackageReq?: Array<CreatePackageReq>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageToReturnDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelPackageCreatePost(packageName, active, duration, price, createPackageReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست پکیج ها
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {'Active' | 'Inactive'} [type] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelPackageGet(order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', type?: 'Active' | 'Inactive', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageToReturnDtoPagedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelPackageGet(order, type, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف بسته
         * @param {number} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelPackagePackageIdDelete(packageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelPackagePackageIdDelete(packageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary محصولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelProductGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductsToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelProductGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تصویر کیو آر کد
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelQrCodeImageAdviserIdGet(adviserId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelQrCodeImageAdviserIdGet(adviserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelRegistredAgencyStaticsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelRegistredAgencyStaticsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست نقش ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelRoleListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelRoleListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت یک نقش جدید
         * @param {RoleForCreateDto} [roleForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelRolePost(roleForCreateDto?: RoleForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelRolePost(roleForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ویرایش یک نقش
         * @param {RoleForUpdateDto} [roleForUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelRolePut(roleForUpdateDto?: RoleForUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelRolePut(roleForUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست کاربران با کد نقش
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelRoleRoleIdEmployeesGet(roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelRoleRoleIdEmployeesGet(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary دریافت یک نقش با کد
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelRoleRoleIdGet(roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleToReturnDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelRoleRoleIdGet(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelSiteMapGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelSiteMapGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiControlPanelTestGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiControlPanelTestGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ControlPanelApi - factory interface
 * @export
 */
export const ControlPanelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ControlPanelApiFp(configuration)
    return {
        /**
         * 
         * @summary دریافت یک دسترسی با کد
         * @param {number} accessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessAccessIdGet(accessId: number, options?: any): AxiosPromise<AccessToReturnDto> {
            return localVarFp.apiControlPanelAccessAccessIdGet(accessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف دسترسی از یک نقش
         * @param {number} accessId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessAccessIdRoleIdDelete(accessId: number, roleId: number, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiControlPanelAccessAccessIdRoleIdDelete(accessId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary اختصاص دسترسی به نقش
         * @param {number} accessId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessAccessIdRoleIdPatch(accessId: number, roleId: number, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiControlPanelAccessAccessIdRoleIdPatch(accessId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست کلیه دسترسی ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessListGet(options?: any): AxiosPromise<AccessToReturnDtoListResultSET> {
            return localVarFp.apiControlPanelAccessListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست دسترسی های یک نقش
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessListRoleIdGet(roleId: number, options?: any): AxiosPromise<AccessToReturnDtoListResultSET> {
            return localVarFp.apiControlPanelAccessListRoleIdGet(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ویرایش یک دسترسی
         * @param {AccessForUpdateDto} [accessForUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAccessPut(accessForUpdateDto?: AccessForUpdateDto, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelAccessPut(accessForUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAddMainBannerGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelAddMainBannerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAddProjectGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelAddProjectGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAddSideBannerGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelAddSideBannerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل اگهی های اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsLetCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsLetCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل آگهی های اجاره در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsLetPendingCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsLetPendingCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل اگهی های منتشر شده اجاره
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsLetPublishedCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsLetPublishedCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل اگهی های در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsPendingCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsPendingCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار تعداد آگهی در هر استان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsProvinceStaticGet(options?: any): AxiosPromise<Array<AdsInProvince>> {
            return localVarFp.apiControlPanelAdsProvinceStaticGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد آگهی های فروش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSellCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsSellCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل آگهی های فروش در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSellPendingCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsSellPendingCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل اگهی های فروش منتشر شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSellPublishedCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsSellPublishedCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل اگهی های رد شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAdsSkipCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAdsSkipCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary امار آژانس ها در استان ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgenciesProvinceStaticGet(options?: any): AxiosPromise<Array<AgencyAndCount>> {
            return localVarFp.apiControlPanelAgenciesProvinceStaticGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد آژانس های فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyActiveCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAgencyActiveCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyActivityLogGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelAgencyActivityLogGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آگهی های اجاره آژانس
         * @param {number} agencyId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdAdsLetGet(agencyId: number, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<LetToReturnDtoPagedList> {
            return localVarFp.apiControlPanelAgencyAgencyIdAdsLetGet(agencyId, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آگهی های فروش آژانس
         * @param {number} agencyId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdAdsSellGet(agencyId: number, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<SellToReturnDtoPagedList> {
            return localVarFp.apiControlPanelAgencyAgencyIdAdsSellGet(agencyId, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست مشاوران یک آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdAdvisersGet(agencyId: number, options?: any): AxiosPromise<Array<AdviserToReturnDto>> {
            return localVarFp.apiControlPanelAgencyAgencyIdAdvisersGet(agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قرارداد آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdContractGet(agencyId: number, options?: any): AxiosPromise<ContractToReturnDtoResultSET> {
            return localVarFp.apiControlPanelAgencyAgencyIdContractGet(agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست گروه های آژانس
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyAgencyIdGroupsGet(agencyId: number, options?: any): AxiosPromise<Array<GroupToReturnDto>> {
            return localVarFp.apiControlPanelAgencyAgencyIdGroupsGet(agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آژانس
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyIdGet(id: number, options?: any): AxiosPromise<AgencyRes> {
            return localVarFp.apiControlPanelAgencyIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آژانس ها
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyListGet(currentPage?: number, pageSize?: number, query?: string, options?: any): AxiosPromise<AgencyResPagedList> {
            return localVarFp.apiControlPanelAgencyListGet(currentPage, pageSize, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ارسال پیام به کارشناس
         * @param {number} adviserId 
         * @param {string} [title] 
         * @param {string} [message] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyMessageAdviserIdPost(adviserId: number, title?: string, message?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelAgencyMessageAdviserIdPost(adviserId, title, message, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد آژانس های رد شده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyNotVerifiedCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAgencyNotVerifiedCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آژانس های تایید نشده
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyNotVerifiedListGet(currentPage?: number, pageSize?: number, query?: string, options?: any): AxiosPromise<AgencyToReturnDtoPagedListResultSET> {
            return localVarFp.apiControlPanelAgencyNotVerifiedListGet(currentPage, pageSize, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد آژانس های در حال بررسی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyPendingCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiControlPanelAgencyPendingCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary عقد قرارداد برای آژانس
         * @param {number} [agencyId] کد آژانس
         * @param {number} [packageId] کد بسته
         * @param {number} [duration] مدت اعتبار
         * @param {string} [price] قیمت تمام شده
         * @param {string} [description] توضیحات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyRegisterContractPost(agencyId?: number, packageId?: number, duration?: number, price?: string, description?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiControlPanelAgencyRegisterContractPost(agencyId, packageId, duration, price, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تایید آژانس توسط پرسنل
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelAgencyVerifyAgencyIdPatch(agencyId: number, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiControlPanelAgencyVerifyAgencyIdPatch(agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary اپلود ورژن جدید اپ
         * @param {string} [versionName] Version Name
         * @param {string} [versionNumber] Version Number
         * @param {boolean} [required] Required
         * @param {any} [path] Path
         * @param {string} [notes] Notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelApkUploadPost(versionName?: string, versionNumber?: string, required?: boolean, path?: any, notes?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiControlPanelApkUploadPost(versionName, versionNumber, required, path, notes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeActivityLogGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelEmployeeActivityLogGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary پرسنل
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeIdGet(id: number, options?: any): AxiosPromise<EmployeeToReturnDto> {
            return localVarFp.apiControlPanelEmployeeIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست پرسنل
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeListGet(currentPage?: number, pageSize?: number, query?: string, options?: any): AxiosPromise<EmployeeToReturnDtoPagedListResultSET> {
            return localVarFp.apiControlPanelEmployeeListGet(currentPage, pageSize, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ورود
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeLoginPost(userForLoginDto?: UserForLoginDto, options?: any): AxiosPromise<LoginResultDto> {
            return localVarFp.apiControlPanelEmployeeLoginPost(userForLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت نام کارمند جدید
         * @param {number} [roleId] کد نقش
         * @param {string} [fullName] نام کامل
         * @param {string} [email] ایمیل
         * @param {string} [password] رمز
         * @param {string} [mobile] موبایل
         * @param {any} [profile] تصویر
         * @param {string} [born] تاریخ تولد
         * @param {string} [ncode] کد ملی
         * @param {string} [phone] تلفن
         * @param {string} [address] آدرس
         * @param {string} [city] شهر
         * @param {string} [province] استان
         * @param {string} [gender] جنسیت
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelEmployeeRegisterPost(roleId?: number, fullName?: string, email?: string, password?: string, mobile?: string, profile?: any, born?: string, ncode?: string, phone?: string, address?: string, city?: string, province?: string, gender?: string, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiControlPanelEmployeeRegisterPost(roleId, fullName, email, password, mobile, profile, born, ncode, phone, address, city, province, gender, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetCityListGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGetCityListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetFollowUpListGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGetFollowUpListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetMainBannerListGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGetMainBannerListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetPendingAdGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGetPendingAdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetProjectListGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGetProjectListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetSideBannerListGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGetSideBannerListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGetSkippedAdGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGetSkippedAdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupGroupIdPut(groupId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGroupGroupIdPut(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست زمینه فعالیت گروه ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsContextListGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiControlPanelGroupsContextListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف آژانس از گروه
         * @param {number} groupId 
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdAgencyAgencyIdDelete(groupId: number, agencyId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelGroupsGroupIdAgencyAgencyIdDelete(groupId, agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary افزودن آژانس به گروه
         * @param {number} groupId 
         * @param {number} agencyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdAgencyAgencyIdPost(groupId: number, agencyId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelGroupsGroupIdAgencyAgencyIdPost(groupId, agencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آژانس های یک گروها
         * @param {number} groupId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdAgencyListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: any): AxiosPromise<AgencyToReturnDtoPagedList> {
            return localVarFp.apiControlPanelGroupsGroupIdAgencyListGet(groupId, currentPage, pageSize, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdDelete(groupId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGroupsGroupIdDelete(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف پرسنل از گروه
         * @param {number} groupId 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete(groupId: number, employeeId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete(groupId, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary افزودن پرسنل به گروه
         * @param {number} groupId 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost(groupId: number, employeeId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost(groupId, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست پرسنل یک گروه
         * @param {number} groupId 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsGroupIdEmployeeListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: any): AxiosPromise<EmployeeToReturnDtoPagedList> {
            return localVarFp.apiControlPanelGroupsGroupIdEmployeeListGet(groupId, currentPage, pageSize, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست گروه ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsListGet(options?: any): AxiosPromise<Array<GroupToReturnDto>> {
            return localVarFp.apiControlPanelGroupsListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelGroupsPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelGroupsPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelInsertedAdStaticsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelInsertedAdStaticsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelInsertedAdStatusStaticsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelInsertedAdStatusStaticsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelManageDistrictGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelManageDistrictGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelMergeNeighbourHoodsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelMergeNeighbourHoodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelMoveNeighbourHoodsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelMoveNeighbourHoodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary افزودن بسته
         * @param {string} [packageName] نام بسته
         * @param {boolean} [active] فعال
         * @param {number} [duration] ماه
         * @param {string} [price] قیمت
         * @param {Array<CreatePackageReq>} [createPackageReq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelPackageCreatePost(packageName?: string, active?: boolean, duration?: number, price?: string, createPackageReq?: Array<CreatePackageReq>, options?: any): AxiosPromise<PackageToReturnDto> {
            return localVarFp.apiControlPanelPackageCreatePost(packageName, active, duration, price, createPackageReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست پکیج ها
         * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
         * @param {'Active' | 'Inactive'} [type] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelPackageGet(order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', type?: 'Active' | 'Inactive', currentPage?: number, pageSize?: number, options?: any): AxiosPromise<PackageToReturnDtoPagedList> {
            return localVarFp.apiControlPanelPackageGet(order, type, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف بسته
         * @param {number} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelPackagePackageIdDelete(packageId: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiControlPanelPackagePackageIdDelete(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary محصولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelProductGet(options?: any): AxiosPromise<Array<ProductsToReturnDto>> {
            return localVarFp.apiControlPanelProductGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تصویر کیو آر کد
         * @param {number} adviserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelQrCodeImageAdviserIdGet(adviserId: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiControlPanelQrCodeImageAdviserIdGet(adviserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRegistredAgencyStaticsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelRegistredAgencyStaticsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست نقش ها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRoleListGet(options?: any): AxiosPromise<Array<RoleToReturnDto>> {
            return localVarFp.apiControlPanelRoleListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت یک نقش جدید
         * @param {RoleForCreateDto} [roleForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRolePost(roleForCreateDto?: RoleForCreateDto, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelRolePost(roleForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ویرایش یک نقش
         * @param {RoleForUpdateDto} [roleForUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRolePut(roleForUpdateDto?: RoleForUpdateDto, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelRolePut(roleForUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست کاربران با کد نقش
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRoleRoleIdEmployeesGet(roleId: number, options?: any): AxiosPromise<Array<EmployeeToReturnDto>> {
            return localVarFp.apiControlPanelRoleRoleIdEmployeesGet(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary دریافت یک نقش با کد
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelRoleRoleIdGet(roleId: number, options?: any): AxiosPromise<RoleToReturnDto> {
            return localVarFp.apiControlPanelRoleRoleIdGet(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelSiteMapGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiControlPanelSiteMapGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiControlPanelTestGet(options?: any): AxiosPromise<boolean> {
            return localVarFp.apiControlPanelTestGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ControlPanelApi - interface
 * @export
 * @interface ControlPanelApi
 */
export interface ControlPanelApiInterface {
    /**
     * 
     * @summary دریافت یک دسترسی با کد
     * @param {number} accessId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAccessAccessIdGet(accessId: number, options?: AxiosRequestConfig): AxiosPromise<AccessToReturnDto>;

    /**
     * 
     * @summary حذف دسترسی از یک نقش
     * @param {number} accessId 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAccessAccessIdRoleIdDelete(accessId: number, roleId: number, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary اختصاص دسترسی به نقش
     * @param {number} accessId 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAccessAccessIdRoleIdPatch(accessId: number, roleId: number, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary لیست کلیه دسترسی ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAccessListGet(options?: AxiosRequestConfig): AxiosPromise<AccessToReturnDtoListResultSET>;

    /**
     * 
     * @summary لیست دسترسی های یک نقش
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAccessListRoleIdGet(roleId: number, options?: AxiosRequestConfig): AxiosPromise<AccessToReturnDtoListResultSET>;

    /**
     * 
     * @summary ویرایش یک دسترسی
     * @param {AccessForUpdateDto} [accessForUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAccessPut(accessForUpdateDto?: AccessForUpdateDto, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAddMainBannerGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAddProjectGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAddSideBannerGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعداد کل اگهی های اجاره
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsLetCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary تعداد کل آگهی های اجاره در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsLetPendingCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary تعداد کل اگهی های منتشر شده اجاره
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsLetPublishedCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary تعداد کل اگهی های در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsPendingCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary آمار تعداد آگهی در هر استان
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsProvinceStaticGet(options?: AxiosRequestConfig): AxiosPromise<Array<AdsInProvince>>;

    /**
     * 
     * @summary تعداد آگهی های فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsSellCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary تعداد کل آگهی های فروش در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsSellPendingCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary تعداد کل اگهی های فروش منتشر شده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsSellPublishedCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary تعداد کل اگهی های رد شده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAdsSkipCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary امار آژانس ها در استان ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgenciesProvinceStaticGet(options?: AxiosRequestConfig): AxiosPromise<Array<AgencyAndCount>>;

    /**
     * 
     * @summary تعداد آژانس های فعال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyActiveCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyActivityLogGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لیست آگهی های اجاره آژانس
     * @param {number} agencyId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyAgencyIdAdsLetGet(agencyId: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<LetToReturnDtoPagedList>;

    /**
     * 
     * @summary لیست آگهی های فروش آژانس
     * @param {number} agencyId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyAgencyIdAdsSellGet(agencyId: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<SellToReturnDtoPagedList>;

    /**
     * 
     * @summary لیست مشاوران یک آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyAgencyIdAdvisersGet(agencyId: number, options?: AxiosRequestConfig): AxiosPromise<Array<AdviserToReturnDto>>;

    /**
     * 
     * @summary قرارداد آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyAgencyIdContractGet(agencyId: number, options?: AxiosRequestConfig): AxiosPromise<ContractToReturnDtoResultSET>;

    /**
     * 
     * @summary لیست گروه های آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyAgencyIdGroupsGet(agencyId: number, options?: AxiosRequestConfig): AxiosPromise<Array<GroupToReturnDto>>;

    /**
     * 
     * @summary آژانس
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyIdGet(id: number, options?: AxiosRequestConfig): AxiosPromise<AgencyRes>;

    /**
     * 
     * @summary لیست آژانس ها
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<AgencyResPagedList>;

    /**
     * 
     * @summary ارسال پیام به کارشناس
     * @param {number} adviserId 
     * @param {string} [title] 
     * @param {string} [message] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyMessageAdviserIdPost(adviserId: number, title?: string, message?: string, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary تعداد آژانس های رد شده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyNotVerifiedCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary لیست آژانس های تایید نشده
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyNotVerifiedListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<AgencyToReturnDtoPagedListResultSET>;

    /**
     * 
     * @summary تعداد آژانس های در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyPendingCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary عقد قرارداد برای آژانس
     * @param {number} [agencyId] کد آژانس
     * @param {number} [packageId] کد بسته
     * @param {number} [duration] مدت اعتبار
     * @param {string} [price] قیمت تمام شده
     * @param {string} [description] توضیحات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyRegisterContractPost(agencyId?: number, packageId?: number, duration?: number, price?: string, description?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary تایید آژانس توسط پرسنل
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelAgencyVerifyAgencyIdPatch(agencyId: number, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary اپلود ورژن جدید اپ
     * @param {string} [versionName] Version Name
     * @param {string} [versionNumber] Version Number
     * @param {boolean} [required] Required
     * @param {any} [path] Path
     * @param {string} [notes] Notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelApkUploadPost(versionName?: string, versionNumber?: string, required?: boolean, path?: any, notes?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelEmployeeActivityLogGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary پرسنل
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelEmployeeIdGet(id: number, options?: AxiosRequestConfig): AxiosPromise<EmployeeToReturnDto>;

    /**
     * 
     * @summary لیست پرسنل
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelEmployeeListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<EmployeeToReturnDtoPagedListResultSET>;

    /**
     * 
     * @summary ورود
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelEmployeeLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): AxiosPromise<LoginResultDto>;

    /**
     * 
     * @summary ثبت نام کارمند جدید
     * @param {number} [roleId] کد نقش
     * @param {string} [fullName] نام کامل
     * @param {string} [email] ایمیل
     * @param {string} [password] رمز
     * @param {string} [mobile] موبایل
     * @param {any} [profile] تصویر
     * @param {string} [born] تاریخ تولد
     * @param {string} [ncode] کد ملی
     * @param {string} [phone] تلفن
     * @param {string} [address] آدرس
     * @param {string} [city] شهر
     * @param {string} [province] استان
     * @param {string} [gender] جنسیت
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelEmployeeRegisterPost(roleId?: number, fullName?: string, email?: string, password?: string, mobile?: string, profile?: any, born?: string, ncode?: string, phone?: string, address?: string, city?: string, province?: string, gender?: string, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGetCityListGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGetFollowUpListGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGetMainBannerListGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGetPendingAdGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGetProjectListGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGetSideBannerListGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGetSkippedAdGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupGroupIdPut(groupId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لیست زمینه فعالیت گروه ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsContextListGet(options?: AxiosRequestConfig): AxiosPromise<Array<string>>;

    /**
     * 
     * @summary حذف آژانس از گروه
     * @param {number} groupId 
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsGroupIdAgencyAgencyIdDelete(groupId: number, agencyId: number, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary افزودن آژانس به گروه
     * @param {number} groupId 
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsGroupIdAgencyAgencyIdPost(groupId: number, agencyId: number, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary لیست آژانس های یک گروها
     * @param {number} groupId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsGroupIdAgencyListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<AgencyToReturnDtoPagedList>;

    /**
     * 
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsGroupIdDelete(groupId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف پرسنل از گروه
     * @param {number} groupId 
     * @param {number} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete(groupId: number, employeeId: number, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary افزودن پرسنل به گروه
     * @param {number} groupId 
     * @param {number} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost(groupId: number, employeeId: number, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary لیست پرسنل یک گروه
     * @param {number} groupId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsGroupIdEmployeeListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<EmployeeToReturnDtoPagedList>;

    /**
     * 
     * @summary لیست گروه ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsListGet(options?: AxiosRequestConfig): AxiosPromise<Array<GroupToReturnDto>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelGroupsPost(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelInsertedAdStaticsGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelInsertedAdStatusStaticsGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelManageDistrictGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelMergeNeighbourHoodsGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelMoveNeighbourHoodsGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary افزودن بسته
     * @param {string} [packageName] نام بسته
     * @param {boolean} [active] فعال
     * @param {number} [duration] ماه
     * @param {string} [price] قیمت
     * @param {Array<CreatePackageReq>} [createPackageReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelPackageCreatePost(packageName?: string, active?: boolean, duration?: number, price?: string, createPackageReq?: Array<CreatePackageReq>, options?: AxiosRequestConfig): AxiosPromise<PackageToReturnDto>;

    /**
     * 
     * @summary لیست پکیج ها
     * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
     * @param {'Active' | 'Inactive'} [type] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelPackageGet(order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', type?: 'Active' | 'Inactive', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<PackageToReturnDtoPagedList>;

    /**
     * 
     * @summary حذف بسته
     * @param {number} packageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelPackagePackageIdDelete(packageId: number, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary محصولات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelProductGet(options?: AxiosRequestConfig): AxiosPromise<Array<ProductsToReturnDto>>;

    /**
     * 
     * @summary تصویر کیو آر کد
     * @param {number} adviserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelQrCodeImageAdviserIdGet(adviserId: number, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelRegistredAgencyStaticsGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لیست نقش ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelRoleListGet(options?: AxiosRequestConfig): AxiosPromise<Array<RoleToReturnDto>>;

    /**
     * 
     * @summary ثبت یک نقش جدید
     * @param {RoleForCreateDto} [roleForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelRolePost(roleForCreateDto?: RoleForCreateDto, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary ویرایش یک نقش
     * @param {RoleForUpdateDto} [roleForUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelRolePut(roleForUpdateDto?: RoleForUpdateDto, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary لیست کاربران با کد نقش
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelRoleRoleIdEmployeesGet(roleId: number, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeToReturnDto>>;

    /**
     * 
     * @summary دریافت یک نقش با کد
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelRoleRoleIdGet(roleId: number, options?: AxiosRequestConfig): AxiosPromise<RoleToReturnDto>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelSiteMapGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApiInterface
     */
    apiControlPanelTestGet(options?: AxiosRequestConfig): AxiosPromise<boolean>;

}

/**
 * ControlPanelApi - object-oriented interface
 * @export
 * @class ControlPanelApi
 * @extends {BaseAPI}
 */
export class ControlPanelApi extends BaseAPI implements ControlPanelApiInterface {
    /**
     * 
     * @summary دریافت یک دسترسی با کد
     * @param {number} accessId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAccessAccessIdGet(accessId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAccessAccessIdGet(accessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف دسترسی از یک نقش
     * @param {number} accessId 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAccessAccessIdRoleIdDelete(accessId: number, roleId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAccessAccessIdRoleIdDelete(accessId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary اختصاص دسترسی به نقش
     * @param {number} accessId 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAccessAccessIdRoleIdPatch(accessId: number, roleId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAccessAccessIdRoleIdPatch(accessId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست کلیه دسترسی ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAccessListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAccessListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست دسترسی های یک نقش
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAccessListRoleIdGet(roleId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAccessListRoleIdGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ویرایش یک دسترسی
     * @param {AccessForUpdateDto} [accessForUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAccessPut(accessForUpdateDto?: AccessForUpdateDto, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAccessPut(accessForUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAddMainBannerGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAddMainBannerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAddProjectGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAddProjectGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAddSideBannerGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAddSideBannerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل اگهی های اجاره
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsLetCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsLetCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل آگهی های اجاره در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsLetPendingCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsLetPendingCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل اگهی های منتشر شده اجاره
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsLetPublishedCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsLetPublishedCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل اگهی های در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsPendingCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsPendingCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار تعداد آگهی در هر استان
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsProvinceStaticGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsProvinceStaticGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد آگهی های فروش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsSellCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsSellCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل آگهی های فروش در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsSellPendingCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsSellPendingCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل اگهی های فروش منتشر شده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsSellPublishedCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsSellPublishedCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل اگهی های رد شده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAdsSkipCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAdsSkipCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary امار آژانس ها در استان ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgenciesProvinceStaticGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgenciesProvinceStaticGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد آژانس های فعال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyActiveCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyActiveCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyActivityLogGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyActivityLogGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آگهی های اجاره آژانس
     * @param {number} agencyId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyAgencyIdAdsLetGet(agencyId: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyAgencyIdAdsLetGet(agencyId, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آگهی های فروش آژانس
     * @param {number} agencyId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyAgencyIdAdsSellGet(agencyId: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyAgencyIdAdsSellGet(agencyId, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست مشاوران یک آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyAgencyIdAdvisersGet(agencyId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyAgencyIdAdvisersGet(agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قرارداد آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyAgencyIdContractGet(agencyId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyAgencyIdContractGet(agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست گروه های آژانس
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyAgencyIdGroupsGet(agencyId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyAgencyIdGroupsGet(agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آژانس
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyIdGet(id: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آژانس ها
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyListGet(currentPage, pageSize, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ارسال پیام به کارشناس
     * @param {number} adviserId 
     * @param {string} [title] 
     * @param {string} [message] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyMessageAdviserIdPost(adviserId: number, title?: string, message?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyMessageAdviserIdPost(adviserId, title, message, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد آژانس های رد شده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyNotVerifiedCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyNotVerifiedCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آژانس های تایید نشده
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyNotVerifiedListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyNotVerifiedListGet(currentPage, pageSize, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد آژانس های در حال بررسی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyPendingCountGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyPendingCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary عقد قرارداد برای آژانس
     * @param {number} [agencyId] کد آژانس
     * @param {number} [packageId] کد بسته
     * @param {number} [duration] مدت اعتبار
     * @param {string} [price] قیمت تمام شده
     * @param {string} [description] توضیحات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyRegisterContractPost(agencyId?: number, packageId?: number, duration?: number, price?: string, description?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyRegisterContractPost(agencyId, packageId, duration, price, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تایید آژانس توسط پرسنل
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelAgencyVerifyAgencyIdPatch(agencyId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelAgencyVerifyAgencyIdPatch(agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary اپلود ورژن جدید اپ
     * @param {string} [versionName] Version Name
     * @param {string} [versionNumber] Version Number
     * @param {boolean} [required] Required
     * @param {any} [path] Path
     * @param {string} [notes] Notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelApkUploadPost(versionName?: string, versionNumber?: string, required?: boolean, path?: any, notes?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelApkUploadPost(versionName, versionNumber, required, path, notes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelEmployeeActivityLogGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelEmployeeActivityLogGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary پرسنل
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelEmployeeIdGet(id: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelEmployeeIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست پرسنل
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelEmployeeListGet(currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelEmployeeListGet(currentPage, pageSize, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ورود
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelEmployeeLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelEmployeeLoginPost(userForLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت نام کارمند جدید
     * @param {number} [roleId] کد نقش
     * @param {string} [fullName] نام کامل
     * @param {string} [email] ایمیل
     * @param {string} [password] رمز
     * @param {string} [mobile] موبایل
     * @param {any} [profile] تصویر
     * @param {string} [born] تاریخ تولد
     * @param {string} [ncode] کد ملی
     * @param {string} [phone] تلفن
     * @param {string} [address] آدرس
     * @param {string} [city] شهر
     * @param {string} [province] استان
     * @param {string} [gender] جنسیت
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelEmployeeRegisterPost(roleId?: number, fullName?: string, email?: string, password?: string, mobile?: string, profile?: any, born?: string, ncode?: string, phone?: string, address?: string, city?: string, province?: string, gender?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelEmployeeRegisterPost(roleId, fullName, email, password, mobile, profile, born, ncode, phone, address, city, province, gender, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGetCityListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGetCityListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGetFollowUpListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGetFollowUpListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGetMainBannerListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGetMainBannerListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGetPendingAdGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGetPendingAdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGetProjectListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGetProjectListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGetSideBannerListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGetSideBannerListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGetSkippedAdGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGetSkippedAdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupGroupIdPut(groupId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupGroupIdPut(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست زمینه فعالیت گروه ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsContextListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsContextListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف آژانس از گروه
     * @param {number} groupId 
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsGroupIdAgencyAgencyIdDelete(groupId: number, agencyId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsGroupIdAgencyAgencyIdDelete(groupId, agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary افزودن آژانس به گروه
     * @param {number} groupId 
     * @param {number} agencyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsGroupIdAgencyAgencyIdPost(groupId: number, agencyId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsGroupIdAgencyAgencyIdPost(groupId, agencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آژانس های یک گروها
     * @param {number} groupId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsGroupIdAgencyListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsGroupIdAgencyListGet(groupId, currentPage, pageSize, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsGroupIdDelete(groupId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsGroupIdDelete(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف پرسنل از گروه
     * @param {number} groupId 
     * @param {number} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete(groupId: number, employeeId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsGroupIdEmployeeEmployeeIdDelete(groupId, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary افزودن پرسنل به گروه
     * @param {number} groupId 
     * @param {number} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost(groupId: number, employeeId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsGroupIdEmployeeEmployeeIdPost(groupId, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست پرسنل یک گروه
     * @param {number} groupId 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsGroupIdEmployeeListGet(groupId: number, currentPage?: number, pageSize?: number, query?: string, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsGroupIdEmployeeListGet(groupId, currentPage, pageSize, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست گروه ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelGroupsPost(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelGroupsPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelInsertedAdStaticsGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelInsertedAdStaticsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelInsertedAdStatusStaticsGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelInsertedAdStatusStaticsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelManageDistrictGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelManageDistrictGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelMergeNeighbourHoodsGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelMergeNeighbourHoodsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelMoveNeighbourHoodsGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelMoveNeighbourHoodsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary افزودن بسته
     * @param {string} [packageName] نام بسته
     * @param {boolean} [active] فعال
     * @param {number} [duration] ماه
     * @param {string} [price] قیمت
     * @param {Array<CreatePackageReq>} [createPackageReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelPackageCreatePost(packageName?: string, active?: boolean, duration?: number, price?: string, createPackageReq?: Array<CreatePackageReq>, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelPackageCreatePost(packageName, active, duration, price, createPackageReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست پکیج ها
     * @param {'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest'} [order] 
     * @param {'Active' | 'Inactive'} [type] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelPackageGet(order?: 'MostPopular' | 'Newest' | 'Oldest' | 'MostExpensive' | 'Cheapest', type?: 'Active' | 'Inactive', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelPackageGet(order, type, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف بسته
     * @param {number} packageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelPackagePackageIdDelete(packageId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelPackagePackageIdDelete(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary محصولات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelProductGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelProductGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تصویر کیو آر کد
     * @param {number} adviserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelQrCodeImageAdviserIdGet(adviserId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelQrCodeImageAdviserIdGet(adviserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelRegistredAgencyStaticsGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelRegistredAgencyStaticsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست نقش ها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelRoleListGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelRoleListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت یک نقش جدید
     * @param {RoleForCreateDto} [roleForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelRolePost(roleForCreateDto?: RoleForCreateDto, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelRolePost(roleForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ویرایش یک نقش
     * @param {RoleForUpdateDto} [roleForUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelRolePut(roleForUpdateDto?: RoleForUpdateDto, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelRolePut(roleForUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست کاربران با کد نقش
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelRoleRoleIdEmployeesGet(roleId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelRoleRoleIdEmployeesGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary دریافت یک نقش با کد
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelRoleRoleIdGet(roleId: number, options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelRoleRoleIdGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelSiteMapGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelSiteMapGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlPanelApi
     */
    public apiControlPanelTestGet(options?: AxiosRequestConfig) {
        return ControlPanelApiFp(this.configuration).apiControlPanelTestGet(options).then((request) => request(this.axios, this.basePath));
    }
}
