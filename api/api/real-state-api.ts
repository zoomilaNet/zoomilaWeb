/* tslint:disable */
/* eslint-disable */
/**
 * ای پی آی زومیلا
 * راهنمای استفاده از رابط برنامه نویسی نرم افزار زومیلا
 *
 * The version of the OpenAPI document: v1
 * Contact: jzabihi1980@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdAnalyticsDtoResultSET } from '../model';
// @ts-ignore
import { AdHitStaticDtoResultSET } from '../model';
// @ts-ignore
import { AdPostResultSET } from '../model';
// @ts-ignore
import { AdviserByAgencyForCreateDto } from '../model';
// @ts-ignore
import { AdviserToReturnDto } from '../model';
// @ts-ignore
import { AdviserToReturnDtoResultSET } from '../model';
// @ts-ignore
import { AgencyActivityToReturnDtoPagedListResultSET } from '../model';
// @ts-ignore
import { AgencyAdStatics } from '../model';
// @ts-ignore
import { AgencyDocumentForCreateDto } from '../model';
// @ts-ignore
import { AgencyMessageToReturnDto } from '../model';
// @ts-ignore
import { AgencyMessageToReturnDtoPagedListResultSET } from '../model';
// @ts-ignore
import { ApkToReturnDto } from '../model';
// @ts-ignore
import { ChangePasswordDto } from '../model';
// @ts-ignore
import { ContractToReturnDtoResultSET } from '../model';
// @ts-ignore
import { ForgetPasswordDto } from '../model';
// @ts-ignore
import { HelpDto } from '../model';
// @ts-ignore
import { HelpForCreationDto } from '../model';
// @ts-ignore
import { Int32NullableResultSET } from '../model';
// @ts-ignore
import { LetForCreateDto } from '../model';
// @ts-ignore
import { LetToReturnDtoPagedListResultSET } from '../model';
// @ts-ignore
import { LoginResultDto } from '../model';
// @ts-ignore
import { NeighbourhoodDto } from '../model';
// @ts-ignore
import { NeighbourhoodForCreateDto } from '../model';
// @ts-ignore
import { ProblemDetails } from '../model';
// @ts-ignore
import { SellForCreateDto } from '../model';
// @ts-ignore
import { SellToReturnDtoPagedListResultSET } from '../model';
// @ts-ignore
import { StringDecimalKeyValuePair } from '../model';
// @ts-ignore
import { StringResultSET } from '../model';
// @ts-ignore
import { UserForLoginDto } from '../model';
/**
 * RealStateApi - axios parameter creator
 * @export
 */
export const RealStateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary آمار آگهی
         * @param {'sell' | 'let'} adType 
         * @param {number} adId 
         * @param {string} [fromDt] 
         * @param {string} [toDt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsAnalyticsAdTypeAdIdGet: async (adType: 'sell' | 'let', adId: number, fromDt?: string, toDt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adType' is not null or undefined
            assertParamExists('apiRealStateAdsAnalyticsAdTypeAdIdGet', 'adType', adType)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('apiRealStateAdsAnalyticsAdTypeAdIdGet', 'adId', adId)
            const localVarPath = `/api/RealState/Ads/Analytics/{adType}/{adId}`
                .replace(`{${"adType"}}`, encodeURIComponent(String(adType)))
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromDt !== undefined) {
                localVarQueryParameter['fromDt'] = (fromDt as any instanceof Date) ?
                    (fromDt as any).toISOString() :
                    fromDt;
            }

            if (toDt !== undefined) {
                localVarQueryParameter['toDt'] = (toDt as any instanceof Date) ?
                    (toDt as any).toISOString() :
                    toDt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعیین تصویر اصلی ساختمان
         * @param {number} buildingId 
         * @param {string} photo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch: async (buildingId: number, photo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch', 'buildingId', buildingId)
            // verify required parameter 'photo' is not null or undefined
            assertParamExists('apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch', 'photo', photo)
            const localVarPath = `/api/RealState/Ads/Building/{buildingId}/Photo/{photo}/Main`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)))
                .replace(`{${"photo"}}`, encodeURIComponent(String(photo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف تصویر از ساختمان
         * @param {number} [buildingId] 
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsBuildingPhotoDelete: async (buildingId?: number, photo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/Building/Photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (buildingId !== undefined) {
                localVarQueryParameter['buildingId'] = buildingId;
            }

            if (photo !== undefined) {
                localVarQueryParameter['photo'] = photo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary افزودن تصویر به ساختمان
         * @param {number} buildingId کد ساختمان
         * @param {any} photo تصویر
         * @param {boolean} isMainPhoto تصویر اصلی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsBuildingPhotoPut: async (buildingId: number, photo: any, isMainPhoto: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('apiRealStateAdsBuildingPhotoPut', 'buildingId', buildingId)
            // verify required parameter 'photo' is not null or undefined
            assertParamExists('apiRealStateAdsBuildingPhotoPut', 'photo', photo)
            // verify required parameter 'isMainPhoto' is not null or undefined
            assertParamExists('apiRealStateAdsBuildingPhotoPut', 'isMainPhoto', isMainPhoto)
            const localVarPath = `/api/RealState/Ads/Building/Photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (buildingId !== undefined) { 
                localVarFormParams.append('BuildingId', buildingId as any);
            }
    
            if (photo !== undefined) { 
                localVarFormParams.append('Photo', photo as any);
            }
    
            if (isMainPhoto !== undefined) { 
                localVarFormParams.append('IsMainPhoto', isMainPhoto as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تغییر نوع انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsChangePublishPut: async (adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/ChangePublish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adId !== undefined) {
                localVarQueryParameter['adId'] = adId;
            }

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }

            if (publishType !== undefined) {
                localVarQueryParameter['publishType'] = publishType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف آگهی
         * @param {number} adId 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsDeleteAdIdDelete: async (adId: number, adType?: 'sell' | 'let', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('apiRealStateAdsDeleteAdIdDelete', 'adId', adId)
            const localVarPath = `/api/RealState/Ads/Delete/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف گروهی آگهی ها
         * @param {'sell' | 'let'} [adType] 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsDeleteDelete: async (adType?: 'sell' | 'let', requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ویرایش آگهی های اجاره
         * @param {number} adId 
         * @param {LetForCreateDto} [letForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsEditLetAdIdPut: async (adId: number, letForCreateDto?: LetForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('apiRealStateAdsEditLetAdIdPut', 'adId', adId)
            const localVarPath = `/api/RealState/Ads/Edit/Let/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(letForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ویرایش آگهی های فروش
         * @param {number} adId 
         * @param {SellForCreateDto} [sellForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsEditSellAdIdPut: async (adId: number, sellForCreateDto?: SellForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('apiRealStateAdsEditSellAdIdPut', 'adId', adId)
            const localVarPath = `/api/RealState/Ads/Edit/Sell/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sellForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار بازدید و کلیک(تعداد)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsHitsCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/Hits/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست اگهی های اجاره من
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsLetGet: async (status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/let`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (publishType !== undefined) {
                localVarQueryParameter['PublishType'] = publishType;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت اگهی اجاره
         * @param {LetForCreateDto} [letForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsLetPost: async (letForCreateDto?: LetForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/Let`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(letForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل آگهی های اجاره مشاور
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsLetStatusCountGet: async (status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('apiRealStateAdsLetStatusCountGet', 'status', status)
            const localVarPath = `/api/RealState/Ads/Let/{status}/Count`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsPublishPut: async (adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/Publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adId !== undefined) {
                localVarQueryParameter['adId'] = adId;
            }

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }

            if (publishType !== undefined) {
                localVarQueryParameter['publishType'] = publishType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary بازنشر آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsRePublishPut: async (adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/RePublish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adId !== undefined) {
                localVarQueryParameter['adId'] = adId;
            }

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }

            if (publishType !== undefined) {
                localVarQueryParameter['publishType'] = publishType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آگهی های فروش من
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsSellGet: async (status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/Sell`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (publishType !== undefined) {
                localVarQueryParameter['PublishType'] = publishType;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت آگهی فروش
         * @param {SellForCreateDto} [sellForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsSellPost: async (sellForCreateDto?: SellForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/Sell`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sellForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد کل آگهی های فروش مشاور
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsSellStatusCountGet: async (status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('apiRealStateAdsSellStatusCountGet', 'status', status)
            const localVarPath = `/api/RealState/Ads/Sell/{status}/Count`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لغو انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsUnPublishPut: async (adId?: number, adType?: 'sell' | 'let', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Ads/UnPublish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (adId !== undefined) {
                localVarQueryParameter['adId'] = adId;
            }

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار درخواست شماره تلفن مشاور جهت نمودار
         * @param {number} adviserId 
         * @param {number} [fromMonthsAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet: async (adviserId: number, fromMonthsAgo?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adviserId' is not null or undefined
            assertParamExists('apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet', 'adviserId', adviserId)
            const localVarPath = `/api/RealState/Adviser/{adviserId}/Analytics/PhoneReq`
                .replace(`{${"adviserId"}}`, encodeURIComponent(String(adviserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromMonthsAgo !== undefined) {
                localVarQueryParameter['fromMonthsAgo'] = fromMonthsAgo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تغییر رمز
         * @param {ChangePasswordDto} [changePasswordDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserChangePasswordPost: async (changePasswordDto?: ChangePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Adviser/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف مشاور
         * @param {number} adviserId کد مشاوری که قرار است حذف شود
         * @param {number} replaceBy کد مشاور جایگزین
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserDeleteAdviserIdReplaceByDelete: async (adviserId: number, replaceBy: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adviserId' is not null or undefined
            assertParamExists('apiRealStateAdviserDeleteAdviserIdReplaceByDelete', 'adviserId', adviserId)
            // verify required parameter 'replaceBy' is not null or undefined
            assertParamExists('apiRealStateAdviserDeleteAdviserIdReplaceByDelete', 'replaceBy', replaceBy)
            const localVarPath = `/api/RealState/Adviser/Delete/{adviserId}/{replaceBy}`
                .replace(`{${"adviserId"}}`, encodeURIComponent(String(adviserId)))
                .replace(`{${"replaceBy"}}`, encodeURIComponent(String(replaceBy)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary فراموشی رمز عبور
         * @param {ForgetPasswordDto} [forgetPasswordDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserForgetPasswordPost: async (forgetPasswordDto?: ForgetPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Adviser/ForgetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ورود
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserLoginPost: async (userForLoginDto?: UserForLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Adviser/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ورود با کیو آر کد
         * @param {string} qrCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserLoginQrCodePost: async (qrCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qrCode' is not null or undefined
            assertParamExists('apiRealStateAdviserLoginQrCodePost', 'qrCode', qrCode)
            const localVarPath = `/api/RealState/Adviser/Login/QrCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (qrCode !== undefined) { 
                localVarFormParams.append('qrCode', qrCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary پروفایل مشاور
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserProfileGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Adviser/Profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ویرایش پروفایل مشاور
         * @param {string} [name] نام مشاور
         * @param {any} [profile] تصویر مشاور آژانس
         * @param {string} [email] ایمیل
         * @param {string} [ncode] کدملی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserProfilePut: async (name?: string, profile?: any, email?: string, ncode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Adviser/Profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (profile !== undefined) { 
                localVarFormParams.append('Profile', profile as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            if (ncode !== undefined) { 
                localVarFormParams.append('Ncode', ncode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تایید شماره موبایل مشاور ثبت نام شده
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserVerifyMobilePost: async (userForLoginDto?: UserForLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Adviser/VerifyMobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست فعالیت های آژانس
         * @param {number} [loggerId] logger id
         * @param {Array<string>} [logNames] فعالیت ها
         * @param {string} [fromDt] از تاریخ
         * @param {string} [toDt] تا تاریخ
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyActivitiesGet: async (loggerId?: number, logNames?: Array<string>, fromDt?: string, toDt?: string, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (loggerId !== undefined) {
                localVarQueryParameter['LoggerId'] = loggerId;
            }

            if (logNames) {
                localVarQueryParameter['LogNames'] = logNames;
            }

            if (fromDt !== undefined) {
                localVarQueryParameter['FromDt'] = fromDt;
            }

            if (toDt !== undefined) {
                localVarQueryParameter['ToDt'] = toDt;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary نوع فعالیت
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyActivitiesLogNamesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Activities/LogNames`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست مشاوران آژانس
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Adviser/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت نام مشاور توسط آژانس
         * @param {AdviserByAgencyForCreateDto} [adviserByAgencyForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserPost: async (adviserByAgencyForCreateDto?: AdviserByAgencyForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Adviser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adviserByAgencyForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ویرایش پروفایل مشاور توسط مدیر آژانس
         * @param {number} [adviserId] 
         * @param {string} [name] نام مشاور
         * @param {any} [profile] تصویر مشاور آژانس
         * @param {string} [email] ایمیل
         * @param {string} [ncode] کدملی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserProfilePut: async (adviserId?: number, name?: string, profile?: any, email?: string, ncode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Adviser/Profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (adviserId !== undefined) { 
                localVarFormParams.append('adviserId', adviserId as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (profile !== undefined) { 
                localVarFormParams.append('Profile', profile as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            if (ncode !== undefined) { 
                localVarFormParams.append('Ncode', ncode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تکمیل ثبت نام مشاور
         * @param {string} [name] نام مشاور
         * @param {string} [nCode] سه رقم آخر کد ملی
         * @param {string} [password] رمز
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserRegisterPut: async (name?: string, nCode?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Adviser/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (nCode !== undefined) { 
                localVarFormParams.append('NCode', nCode as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('Password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار آگهی های آژانس در بازه های مختلف ماهانه
         * @param {number} [fromMonthsAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAnalyticsAdCountGet: async (fromMonthsAgo?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Analytics/AdCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromMonthsAgo !== undefined) {
                localVarQueryParameter['fromMonthsAgo'] = fromMonthsAgo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آمار بازدید آگهی های آژانس
         * @param {number} [fromDaysAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAnalyticsAdHitsGet: async (fromDaysAgo?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Analytics/AdHits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromDaysAgo !== undefined) {
                localVarQueryParameter['fromDaysAgo'] = fromDaysAgo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary آیا آژانس تایید شده است
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyCheckGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قرارداد فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyContractGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت اطلاعات تکمیلی آژانس
         * @param {AgencyDocumentForCreateDto} [agencyDocumentForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyDocumentPost: async (agencyDocumentForCreateDto?: AgencyDocumentForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agencyDocumentForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست تمامی پیام های آژانس
         * @param {'Seen' | 'UnSeen'} [messageStatus] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessageGet: async (messageStatus?: 'Seen' | 'UnSeen', currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (messageStatus !== undefined) {
                localVarQueryParameter['MessageStatus'] = messageStatus;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['CurrentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary دریافت یک پیام
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessageMessageIdGet: async (messageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiRealStateAgencyMessageMessageIdGet', 'messageId', messageId)
            const localVarPath = `/api/RealState/Agency/Message/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت خواندن پیام
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessageMessageIdSeenPut: async (messageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiRealStateAgencyMessageMessageIdSeenPut', 'messageId', messageId)
            const localVarPath = `/api/RealState/Agency/Message/{messageId}/Seen`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعداد پیام های خوانده نشده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessagesUnSeenCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Messages/UnSeen/Count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست محلات من
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyNeighborhoodsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Neighborhoods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ثبت نام آژانس و مالک
         * @param {number} cityId 
         * @param {string} agencyName 
         * @param {string} agencyPhone 
         * @param {string} adviserName 
         * @param {string} adviserMobile 
         * @param {string} nationalCode 
         * @param {string} password 
         * @param {string} [email] 
         * @param {any} [agencyProfilePhoto] 
         * @param {any} [adviserProfilePhoto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyPost: async (cityId: number, agencyName: string, agencyPhone: string, adviserName: string, adviserMobile: string, nationalCode: string, password: string, email?: string, agencyProfilePhoto?: any, adviserProfilePhoto?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cityId' is not null or undefined
            assertParamExists('apiRealStateAgencyPost', 'cityId', cityId)
            // verify required parameter 'agencyName' is not null or undefined
            assertParamExists('apiRealStateAgencyPost', 'agencyName', agencyName)
            // verify required parameter 'agencyPhone' is not null or undefined
            assertParamExists('apiRealStateAgencyPost', 'agencyPhone', agencyPhone)
            // verify required parameter 'adviserName' is not null or undefined
            assertParamExists('apiRealStateAgencyPost', 'adviserName', adviserName)
            // verify required parameter 'adviserMobile' is not null or undefined
            assertParamExists('apiRealStateAgencyPost', 'adviserMobile', adviserMobile)
            // verify required parameter 'nationalCode' is not null or undefined
            assertParamExists('apiRealStateAgencyPost', 'nationalCode', nationalCode)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('apiRealStateAgencyPost', 'password', password)
            const localVarPath = `/api/RealState/Agency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (cityId !== undefined) { 
                localVarFormParams.append('cityId', cityId as any);
            }
    
            if (agencyName !== undefined) { 
                localVarFormParams.append('agencyName', agencyName as any);
            }
    
            if (agencyPhone !== undefined) { 
                localVarFormParams.append('agencyPhone', agencyPhone as any);
            }
    
            if (adviserName !== undefined) { 
                localVarFormParams.append('adviserName', adviserName as any);
            }
    
            if (adviserMobile !== undefined) { 
                localVarFormParams.append('adviserMobile', adviserMobile as any);
            }
    
            if (nationalCode !== undefined) { 
                localVarFormParams.append('nationalCode', nationalCode as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
            if (agencyProfilePhoto !== undefined) { 
                localVarFormParams.append('agencyProfilePhoto', agencyProfilePhoto as any);
            }
    
            if (adviserProfilePhoto !== undefined) { 
                localVarFormParams.append('adviserProfilePhoto', adviserProfilePhoto as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ویرایش پروفایل آژانس
         * @param {number} [cityId] رفرنس به شهر
         * @param {string} [name] نام آژانس
         * @param {string} [phone] شماره ثابت
         * @param {any} [logo] تصویر آژانس
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyProfilePut: async (cityId?: number, name?: string, phone?: string, logo?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Agency/Profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (cityId !== undefined) { 
                localVarFormParams.append('CityId', cityId as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (phone !== undefined) { 
                localVarFormParams.append('Phone', phone as any);
            }
    
            if (logo !== undefined) { 
                localVarFormParams.append('Logo', logo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary دانلود اخرین نسخه اپ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateApkLatestVersionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Apk/Latest/Version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary اضافه کردن لیستی از آموزش ها
         * @param {Array<HelpForCreationDto>} [helpForCreationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateHelpAddPost: async (helpForCreationDto?: Array<HelpForCreationDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Help/Add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(helpForCreationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لیست آموزش های اپ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateHelpGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Help`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary افزودن محله
         * @param {NeighbourhoodForCreateDto} [neighbourhoodForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateNeighbourhoodPost: async (neighbourhoodForCreateDto?: NeighbourhoodForCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Neighbourhood`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(neighbourhoodForCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test Redis
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateRedisTestPost: async (firstName?: string, lastName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Redis/Test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test Redis
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateRedistGetGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealState/Redist/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RealStateApi - functional programming interface
 * @export
 */
export const RealStateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RealStateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary آمار آگهی
         * @param {'sell' | 'let'} adType 
         * @param {number} adId 
         * @param {string} [fromDt] 
         * @param {string} [toDt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsAnalyticsAdTypeAdIdGet(adType: 'sell' | 'let', adId: number, fromDt?: string, toDt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdAnalyticsDtoResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsAnalyticsAdTypeAdIdGet(adType, adId, fromDt, toDt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعیین تصویر اصلی ساختمان
         * @param {number} buildingId 
         * @param {string} photo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch(buildingId: number, photo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch(buildingId, photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف تصویر از ساختمان
         * @param {number} [buildingId] 
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsBuildingPhotoDelete(buildingId?: number, photo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsBuildingPhotoDelete(buildingId, photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary افزودن تصویر به ساختمان
         * @param {number} buildingId کد ساختمان
         * @param {any} photo تصویر
         * @param {boolean} isMainPhoto تصویر اصلی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsBuildingPhotoPut(buildingId: number, photo: any, isMainPhoto: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Int32NullableResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsBuildingPhotoPut(buildingId, photo, isMainPhoto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تغییر نوع انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsChangePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsChangePublishPut(adId, adType, publishType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف آگهی
         * @param {number} adId 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsDeleteAdIdDelete(adId: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsDeleteAdIdDelete(adId, adType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف گروهی آگهی ها
         * @param {'sell' | 'let'} [adType] 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsDeleteDelete(adType?: 'sell' | 'let', requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsDeleteDelete(adType, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ویرایش آگهی های اجاره
         * @param {number} adId 
         * @param {LetForCreateDto} [letForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsEditLetAdIdPut(adId: number, letForCreateDto?: LetForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdPostResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsEditLetAdIdPut(adId, letForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ویرایش آگهی های فروش
         * @param {number} adId 
         * @param {SellForCreateDto} [sellForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsEditSellAdIdPut(adId: number, sellForCreateDto?: SellForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdPostResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsEditSellAdIdPut(adId, sellForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار بازدید و کلیک(تعداد)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsHitsCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdHitStaticDtoResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsHitsCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست اگهی های اجاره من
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsLetGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LetToReturnDtoPagedListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsLetGet(status, publishType, query, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت اگهی اجاره
         * @param {LetForCreateDto} [letForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsLetPost(letForCreateDto?: LetForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdPostResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsLetPost(letForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل آگهی های اجاره مشاور
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsLetStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsLetStatusCountGet(status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsPublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsPublishPut(adId, adType, publishType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary بازنشر آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsRePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsRePublishPut(adId, adType, publishType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آگهی های فروش من
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsSellGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellToReturnDtoPagedListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsSellGet(status, publishType, query, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت آگهی فروش
         * @param {SellForCreateDto} [sellForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsSellPost(sellForCreateDto?: SellForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdPostResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsSellPost(sellForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد کل آگهی های فروش مشاور
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsSellStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsSellStatusCountGet(status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لغو انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdsUnPublishPut(adId?: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdsUnPublishPut(adId, adType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار درخواست شماره تلفن مشاور جهت نمودار
         * @param {number} adviserId 
         * @param {number} [fromMonthsAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet(adviserId: number, fromMonthsAgo?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgencyAdStatics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet(adviserId, fromMonthsAgo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تغییر رمز
         * @param {ChangePasswordDto} [changePasswordDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserChangePasswordPost(changePasswordDto?: ChangePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserChangePasswordPost(changePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary حذف مشاور
         * @param {number} adviserId کد مشاوری که قرار است حذف شود
         * @param {number} replaceBy کد مشاور جایگزین
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserDeleteAdviserIdReplaceByDelete(adviserId: number, replaceBy: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserDeleteAdviserIdReplaceByDelete(adviserId, replaceBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary فراموشی رمز عبور
         * @param {ForgetPasswordDto} [forgetPasswordDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserForgetPasswordPost(forgetPasswordDto?: ForgetPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserForgetPasswordPost(forgetPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ورود
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserLoginPost(userForLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ورود با کیو آر کد
         * @param {string} qrCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserLoginQrCodePost(qrCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserLoginQrCodePost(qrCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary پروفایل مشاور
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserProfileGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdviserToReturnDtoResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserProfileGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ویرایش پروفایل مشاور
         * @param {string} [name] نام مشاور
         * @param {any} [profile] تصویر مشاور آژانس
         * @param {string} [email] ایمیل
         * @param {string} [ncode] کدملی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserProfilePut(name?: string, profile?: any, email?: string, ncode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserProfilePut(name, profile, email, ncode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تایید شماره موبایل مشاور ثبت نام شده
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAdviserVerifyMobilePost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAdviserVerifyMobilePost(userForLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست فعالیت های آژانس
         * @param {number} [loggerId] logger id
         * @param {Array<string>} [logNames] فعالیت ها
         * @param {string} [fromDt] از تاریخ
         * @param {string} [toDt] تا تاریخ
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyActivitiesGet(loggerId?: number, logNames?: Array<string>, fromDt?: string, toDt?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyActivityToReturnDtoPagedListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyActivitiesGet(loggerId, logNames, fromDt, toDt, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary نوع فعالیت
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyActivitiesLogNamesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyActivitiesLogNamesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست مشاوران آژانس
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyAdviserListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdviserToReturnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyAdviserListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت نام مشاور توسط آژانس
         * @param {AdviserByAgencyForCreateDto} [adviserByAgencyForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyAdviserPost(adviserByAgencyForCreateDto?: AdviserByAgencyForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyAdviserPost(adviserByAgencyForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ویرایش پروفایل مشاور توسط مدیر آژانس
         * @param {number} [adviserId] 
         * @param {string} [name] نام مشاور
         * @param {any} [profile] تصویر مشاور آژانس
         * @param {string} [email] ایمیل
         * @param {string} [ncode] کدملی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyAdviserProfilePut(adviserId?: number, name?: string, profile?: any, email?: string, ncode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyAdviserProfilePut(adviserId, name, profile, email, ncode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تکمیل ثبت نام مشاور
         * @param {string} [name] نام مشاور
         * @param {string} [nCode] سه رقم آخر کد ملی
         * @param {string} [password] رمز
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyAdviserRegisterPut(name?: string, nCode?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyAdviserRegisterPut(name, nCode, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار آگهی های آژانس در بازه های مختلف ماهانه
         * @param {number} [fromMonthsAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyAnalyticsAdCountGet(fromMonthsAgo?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgencyAdStatics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyAnalyticsAdCountGet(fromMonthsAgo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آمار بازدید آگهی های آژانس
         * @param {number} [fromDaysAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyAnalyticsAdHitsGet(fromDaysAgo?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StringDecimalKeyValuePair>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyAnalyticsAdHitsGet(fromDaysAgo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary آیا آژانس تایید شده است
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyCheckGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyCheckGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary قرارداد فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyContractGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractToReturnDtoResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyContractGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت اطلاعات تکمیلی آژانس
         * @param {AgencyDocumentForCreateDto} [agencyDocumentForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyDocumentPost(agencyDocumentForCreateDto?: AgencyDocumentForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyDocumentPost(agencyDocumentForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست تمامی پیام های آژانس
         * @param {'Seen' | 'UnSeen'} [messageStatus] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyMessageGet(messageStatus?: 'Seen' | 'UnSeen', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyMessageToReturnDtoPagedListResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyMessageGet(messageStatus, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary دریافت یک پیام
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyMessageMessageIdGet(messageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyMessageToReturnDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyMessageMessageIdGet(messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت خواندن پیام
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyMessageMessageIdSeenPut(messageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyMessageMessageIdSeenPut(messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary تعداد پیام های خوانده نشده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyMessagesUnSeenCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyMessagesUnSeenCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست محلات من
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyNeighborhoodsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NeighbourhoodDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyNeighborhoodsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ثبت نام آژانس و مالک
         * @param {number} cityId 
         * @param {string} agencyName 
         * @param {string} agencyPhone 
         * @param {string} adviserName 
         * @param {string} adviserMobile 
         * @param {string} nationalCode 
         * @param {string} password 
         * @param {string} [email] 
         * @param {any} [agencyProfilePhoto] 
         * @param {any} [adviserProfilePhoto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyPost(cityId: number, agencyName: string, agencyPhone: string, adviserName: string, adviserMobile: string, nationalCode: string, password: string, email?: string, agencyProfilePhoto?: any, adviserProfilePhoto?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyPost(cityId, agencyName, agencyPhone, adviserName, adviserMobile, nationalCode, password, email, agencyProfilePhoto, adviserProfilePhoto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ویرایش پروفایل آژانس
         * @param {number} [cityId] رفرنس به شهر
         * @param {string} [name] نام آژانس
         * @param {string} [phone] شماره ثابت
         * @param {any} [logo] تصویر آژانس
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateAgencyProfilePut(cityId?: number, name?: string, phone?: string, logo?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateAgencyProfilePut(cityId, name, phone, logo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary دانلود اخرین نسخه اپ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateApkLatestVersionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApkToReturnDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateApkLatestVersionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary اضافه کردن لیستی از آموزش ها
         * @param {Array<HelpForCreationDto>} [helpForCreationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateHelpAddPost(helpForCreationDto?: Array<HelpForCreationDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultSET>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateHelpAddPost(helpForCreationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary لیست آموزش های اپ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateHelpGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HelpDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateHelpGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary افزودن محله
         * @param {NeighbourhoodForCreateDto} [neighbourhoodForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateNeighbourhoodPost(neighbourhoodForCreateDto?: NeighbourhoodForCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeighbourhoodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateNeighbourhoodPost(neighbourhoodForCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Test Redis
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateRedisTestPost(firstName?: string, lastName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateRedisTestPost(firstName, lastName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Test Redis
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRealStateRedistGetGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRealStateRedistGetGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RealStateApi - factory interface
 * @export
 */
export const RealStateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RealStateApiFp(configuration)
    return {
        /**
         * 
         * @summary آمار آگهی
         * @param {'sell' | 'let'} adType 
         * @param {number} adId 
         * @param {string} [fromDt] 
         * @param {string} [toDt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsAnalyticsAdTypeAdIdGet(adType: 'sell' | 'let', adId: number, fromDt?: string, toDt?: string, options?: any): AxiosPromise<AdAnalyticsDtoResultSET> {
            return localVarFp.apiRealStateAdsAnalyticsAdTypeAdIdGet(adType, adId, fromDt, toDt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعیین تصویر اصلی ساختمان
         * @param {number} buildingId 
         * @param {string} photo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch(buildingId: number, photo: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch(buildingId, photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف تصویر از ساختمان
         * @param {number} [buildingId] 
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsBuildingPhotoDelete(buildingId?: number, photo?: string, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdsBuildingPhotoDelete(buildingId, photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary افزودن تصویر به ساختمان
         * @param {number} buildingId کد ساختمان
         * @param {any} photo تصویر
         * @param {boolean} isMainPhoto تصویر اصلی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsBuildingPhotoPut(buildingId: number, photo: any, isMainPhoto: boolean, options?: any): AxiosPromise<Int32NullableResultSET> {
            return localVarFp.apiRealStateAdsBuildingPhotoPut(buildingId, photo, isMainPhoto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تغییر نوع انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsChangePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdsChangePublishPut(adId, adType, publishType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف آگهی
         * @param {number} adId 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsDeleteAdIdDelete(adId: number, adType?: 'sell' | 'let', options?: any): AxiosPromise<string> {
            return localVarFp.apiRealStateAdsDeleteAdIdDelete(adId, adType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف گروهی آگهی ها
         * @param {'sell' | 'let'} [adType] 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsDeleteDelete(adType?: 'sell' | 'let', requestBody?: Array<number>, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdsDeleteDelete(adType, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ویرایش آگهی های اجاره
         * @param {number} adId 
         * @param {LetForCreateDto} [letForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsEditLetAdIdPut(adId: number, letForCreateDto?: LetForCreateDto, options?: any): AxiosPromise<AdPostResultSET> {
            return localVarFp.apiRealStateAdsEditLetAdIdPut(adId, letForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ویرایش آگهی های فروش
         * @param {number} adId 
         * @param {SellForCreateDto} [sellForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsEditSellAdIdPut(adId: number, sellForCreateDto?: SellForCreateDto, options?: any): AxiosPromise<AdPostResultSET> {
            return localVarFp.apiRealStateAdsEditSellAdIdPut(adId, sellForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار بازدید و کلیک(تعداد)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsHitsCountGet(options?: any): AxiosPromise<AdHitStaticDtoResultSET> {
            return localVarFp.apiRealStateAdsHitsCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست اگهی های اجاره من
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsLetGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<LetToReturnDtoPagedListResultSET> {
            return localVarFp.apiRealStateAdsLetGet(status, publishType, query, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت اگهی اجاره
         * @param {LetForCreateDto} [letForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsLetPost(letForCreateDto?: LetForCreateDto, options?: any): AxiosPromise<AdPostResultSET> {
            return localVarFp.apiRealStateAdsLetPost(letForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل آگهی های اجاره مشاور
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsLetStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: any): AxiosPromise<number> {
            return localVarFp.apiRealStateAdsLetStatusCountGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsPublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdsPublishPut(adId, adType, publishType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary بازنشر آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsRePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdsRePublishPut(adId, adType, publishType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آگهی های فروش من
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
         * @param {'simple' | 'occasion' | 'featured'} [publishType] 
         * @param {string} [query] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsSellGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<SellToReturnDtoPagedListResultSET> {
            return localVarFp.apiRealStateAdsSellGet(status, publishType, query, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت آگهی فروش
         * @param {SellForCreateDto} [sellForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsSellPost(sellForCreateDto?: SellForCreateDto, options?: any): AxiosPromise<AdPostResultSET> {
            return localVarFp.apiRealStateAdsSellPost(sellForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد کل آگهی های فروش مشاور
         * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsSellStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: any): AxiosPromise<number> {
            return localVarFp.apiRealStateAdsSellStatusCountGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لغو انتشار آگهی
         * @param {number} [adId] 
         * @param {'sell' | 'let'} [adType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdsUnPublishPut(adId?: number, adType?: 'sell' | 'let', options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdsUnPublishPut(adId, adType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار درخواست شماره تلفن مشاور جهت نمودار
         * @param {number} adviserId 
         * @param {number} [fromMonthsAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet(adviserId: number, fromMonthsAgo?: number, options?: any): AxiosPromise<Array<AgencyAdStatics>> {
            return localVarFp.apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet(adviserId, fromMonthsAgo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تغییر رمز
         * @param {ChangePasswordDto} [changePasswordDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserChangePasswordPost(changePasswordDto?: ChangePasswordDto, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdviserChangePasswordPost(changePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف مشاور
         * @param {number} adviserId کد مشاوری که قرار است حذف شود
         * @param {number} replaceBy کد مشاور جایگزین
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserDeleteAdviserIdReplaceByDelete(adviserId: number, replaceBy: number, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdviserDeleteAdviserIdReplaceByDelete(adviserId, replaceBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary فراموشی رمز عبور
         * @param {ForgetPasswordDto} [forgetPasswordDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserForgetPasswordPost(forgetPasswordDto?: ForgetPasswordDto, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdviserForgetPasswordPost(forgetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ورود
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserLoginPost(userForLoginDto?: UserForLoginDto, options?: any): AxiosPromise<LoginResultDto> {
            return localVarFp.apiRealStateAdviserLoginPost(userForLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ورود با کیو آر کد
         * @param {string} qrCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserLoginQrCodePost(qrCode: string, options?: any): AxiosPromise<LoginResultDto> {
            return localVarFp.apiRealStateAdviserLoginQrCodePost(qrCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary پروفایل مشاور
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserProfileGet(options?: any): AxiosPromise<AdviserToReturnDtoResultSET> {
            return localVarFp.apiRealStateAdviserProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ویرایش پروفایل مشاور
         * @param {string} [name] نام مشاور
         * @param {any} [profile] تصویر مشاور آژانس
         * @param {string} [email] ایمیل
         * @param {string} [ncode] کدملی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserProfilePut(name?: string, profile?: any, email?: string, ncode?: string, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdviserProfilePut(name, profile, email, ncode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تایید شماره موبایل مشاور ثبت نام شده
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAdviserVerifyMobilePost(userForLoginDto?: UserForLoginDto, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAdviserVerifyMobilePost(userForLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست فعالیت های آژانس
         * @param {number} [loggerId] logger id
         * @param {Array<string>} [logNames] فعالیت ها
         * @param {string} [fromDt] از تاریخ
         * @param {string} [toDt] تا تاریخ
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyActivitiesGet(loggerId?: number, logNames?: Array<string>, fromDt?: string, toDt?: string, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<AgencyActivityToReturnDtoPagedListResultSET> {
            return localVarFp.apiRealStateAgencyActivitiesGet(loggerId, logNames, fromDt, toDt, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary نوع فعالیت
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyActivitiesLogNamesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiRealStateAgencyActivitiesLogNamesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست مشاوران آژانس
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserListGet(options?: any): AxiosPromise<Array<AdviserToReturnDto>> {
            return localVarFp.apiRealStateAgencyAdviserListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت نام مشاور توسط آژانس
         * @param {AdviserByAgencyForCreateDto} [adviserByAgencyForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserPost(adviserByAgencyForCreateDto?: AdviserByAgencyForCreateDto, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyAdviserPost(adviserByAgencyForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ویرایش پروفایل مشاور توسط مدیر آژانس
         * @param {number} [adviserId] 
         * @param {string} [name] نام مشاور
         * @param {any} [profile] تصویر مشاور آژانس
         * @param {string} [email] ایمیل
         * @param {string} [ncode] کدملی
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserProfilePut(adviserId?: number, name?: string, profile?: any, email?: string, ncode?: string, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyAdviserProfilePut(adviserId, name, profile, email, ncode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تکمیل ثبت نام مشاور
         * @param {string} [name] نام مشاور
         * @param {string} [nCode] سه رقم آخر کد ملی
         * @param {string} [password] رمز
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAdviserRegisterPut(name?: string, nCode?: string, password?: string, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyAdviserRegisterPut(name, nCode, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار آگهی های آژانس در بازه های مختلف ماهانه
         * @param {number} [fromMonthsAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAnalyticsAdCountGet(fromMonthsAgo?: number, options?: any): AxiosPromise<Array<AgencyAdStatics>> {
            return localVarFp.apiRealStateAgencyAnalyticsAdCountGet(fromMonthsAgo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آمار بازدید آگهی های آژانس
         * @param {number} [fromDaysAgo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyAnalyticsAdHitsGet(fromDaysAgo?: number, options?: any): AxiosPromise<Array<StringDecimalKeyValuePair>> {
            return localVarFp.apiRealStateAgencyAnalyticsAdHitsGet(fromDaysAgo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary آیا آژانس تایید شده است
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyCheckGet(options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قرارداد فعال
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyContractGet(options?: any): AxiosPromise<ContractToReturnDtoResultSET> {
            return localVarFp.apiRealStateAgencyContractGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت اطلاعات تکمیلی آژانس
         * @param {AgencyDocumentForCreateDto} [agencyDocumentForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyDocumentPost(agencyDocumentForCreateDto?: AgencyDocumentForCreateDto, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyDocumentPost(agencyDocumentForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست تمامی پیام های آژانس
         * @param {'Seen' | 'UnSeen'} [messageStatus] 
         * @param {number} [currentPage] صفحه جاری
         * @param {number} [pageSize] تعداد رکورد در هر صفحه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessageGet(messageStatus?: 'Seen' | 'UnSeen', currentPage?: number, pageSize?: number, options?: any): AxiosPromise<AgencyMessageToReturnDtoPagedListResultSET> {
            return localVarFp.apiRealStateAgencyMessageGet(messageStatus, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary دریافت یک پیام
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessageMessageIdGet(messageId: number, options?: any): AxiosPromise<AgencyMessageToReturnDto> {
            return localVarFp.apiRealStateAgencyMessageMessageIdGet(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت خواندن پیام
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessageMessageIdSeenPut(messageId: number, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyMessageMessageIdSeenPut(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعداد پیام های خوانده نشده
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyMessagesUnSeenCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiRealStateAgencyMessagesUnSeenCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست محلات من
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyNeighborhoodsGet(options?: any): AxiosPromise<Array<NeighbourhoodDto>> {
            return localVarFp.apiRealStateAgencyNeighborhoodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ثبت نام آژانس و مالک
         * @param {number} cityId 
         * @param {string} agencyName 
         * @param {string} agencyPhone 
         * @param {string} adviserName 
         * @param {string} adviserMobile 
         * @param {string} nationalCode 
         * @param {string} password 
         * @param {string} [email] 
         * @param {any} [agencyProfilePhoto] 
         * @param {any} [adviserProfilePhoto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyPost(cityId: number, agencyName: string, agencyPhone: string, adviserName: string, adviserMobile: string, nationalCode: string, password: string, email?: string, agencyProfilePhoto?: any, adviserProfilePhoto?: any, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyPost(cityId, agencyName, agencyPhone, adviserName, adviserMobile, nationalCode, password, email, agencyProfilePhoto, adviserProfilePhoto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ویرایش پروفایل آژانس
         * @param {number} [cityId] رفرنس به شهر
         * @param {string} [name] نام آژانس
         * @param {string} [phone] شماره ثابت
         * @param {any} [logo] تصویر آژانس
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateAgencyProfilePut(cityId?: number, name?: string, phone?: string, logo?: any, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateAgencyProfilePut(cityId, name, phone, logo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary دانلود اخرین نسخه اپ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateApkLatestVersionGet(options?: any): AxiosPromise<ApkToReturnDto> {
            return localVarFp.apiRealStateApkLatestVersionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary اضافه کردن لیستی از آموزش ها
         * @param {Array<HelpForCreationDto>} [helpForCreationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateHelpAddPost(helpForCreationDto?: Array<HelpForCreationDto>, options?: any): AxiosPromise<StringResultSET> {
            return localVarFp.apiRealStateHelpAddPost(helpForCreationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لیست آموزش های اپ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateHelpGet(options?: any): AxiosPromise<Array<HelpDto>> {
            return localVarFp.apiRealStateHelpGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary افزودن محله
         * @param {NeighbourhoodForCreateDto} [neighbourhoodForCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateNeighbourhoodPost(neighbourhoodForCreateDto?: NeighbourhoodForCreateDto, options?: any): AxiosPromise<NeighbourhoodDto> {
            return localVarFp.apiRealStateNeighbourhoodPost(neighbourhoodForCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test Redis
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateRedisTestPost(firstName?: string, lastName?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiRealStateRedisTestPost(firstName, lastName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test Redis
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRealStateRedistGetGet(key?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiRealStateRedistGetGet(key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RealStateApi - interface
 * @export
 * @interface RealStateApi
 */
export interface RealStateApiInterface {
    /**
     * 
     * @summary آمار آگهی
     * @param {'sell' | 'let'} adType 
     * @param {number} adId 
     * @param {string} [fromDt] 
     * @param {string} [toDt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsAnalyticsAdTypeAdIdGet(adType: 'sell' | 'let', adId: number, fromDt?: string, toDt?: string, options?: AxiosRequestConfig): AxiosPromise<AdAnalyticsDtoResultSET>;

    /**
     * 
     * @summary تعیین تصویر اصلی ساختمان
     * @param {number} buildingId 
     * @param {string} photo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch(buildingId: number, photo: string, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * 
     * @summary حذف تصویر از ساختمان
     * @param {number} [buildingId] 
     * @param {string} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsBuildingPhotoDelete(buildingId?: number, photo?: string, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary افزودن تصویر به ساختمان
     * @param {number} buildingId کد ساختمان
     * @param {any} photo تصویر
     * @param {boolean} isMainPhoto تصویر اصلی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsBuildingPhotoPut(buildingId: number, photo: any, isMainPhoto: boolean, options?: AxiosRequestConfig): AxiosPromise<Int32NullableResultSET>;

    /**
     * 
     * @summary تغییر نوع انتشار آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsChangePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary حذف آگهی
     * @param {number} adId 
     * @param {'sell' | 'let'} [adType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsDeleteAdIdDelete(adId: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary حذف گروهی آگهی ها
     * @param {'sell' | 'let'} [adType] 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsDeleteDelete(adType?: 'sell' | 'let', requestBody?: Array<number>, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary ویرایش آگهی های اجاره
     * @param {number} adId 
     * @param {LetForCreateDto} [letForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsEditLetAdIdPut(adId: number, letForCreateDto?: LetForCreateDto, options?: AxiosRequestConfig): AxiosPromise<AdPostResultSET>;

    /**
     * 
     * @summary ویرایش آگهی های فروش
     * @param {number} adId 
     * @param {SellForCreateDto} [sellForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsEditSellAdIdPut(adId: number, sellForCreateDto?: SellForCreateDto, options?: AxiosRequestConfig): AxiosPromise<AdPostResultSET>;

    /**
     * 
     * @summary آمار بازدید و کلیک(تعداد)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsHitsCountGet(options?: AxiosRequestConfig): AxiosPromise<AdHitStaticDtoResultSET>;

    /**
     * 
     * @summary لیست اگهی های اجاره من
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {string} [query] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsLetGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<LetToReturnDtoPagedListResultSET>;

    /**
     * 
     * @summary ثبت اگهی اجاره
     * @param {LetForCreateDto} [letForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsLetPost(letForCreateDto?: LetForCreateDto, options?: AxiosRequestConfig): AxiosPromise<AdPostResultSET>;

    /**
     * 
     * @summary تعداد کل آگهی های اجاره مشاور
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsLetStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary انتشار آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsPublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary بازنشر آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsRePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary لیست آگهی های فروش من
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {string} [query] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsSellGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<SellToReturnDtoPagedListResultSET>;

    /**
     * 
     * @summary ثبت آگهی فروش
     * @param {SellForCreateDto} [sellForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsSellPost(sellForCreateDto?: SellForCreateDto, options?: AxiosRequestConfig): AxiosPromise<AdPostResultSET>;

    /**
     * 
     * @summary تعداد کل آگهی های فروش مشاور
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsSellStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary لغو انتشار آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdsUnPublishPut(adId?: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary آمار درخواست شماره تلفن مشاور جهت نمودار
     * @param {number} adviserId 
     * @param {number} [fromMonthsAgo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet(adviserId: number, fromMonthsAgo?: number, options?: AxiosRequestConfig): AxiosPromise<Array<AgencyAdStatics>>;

    /**
     * 
     * @summary تغییر رمز
     * @param {ChangePasswordDto} [changePasswordDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserChangePasswordPost(changePasswordDto?: ChangePasswordDto, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary حذف مشاور
     * @param {number} adviserId کد مشاوری که قرار است حذف شود
     * @param {number} replaceBy کد مشاور جایگزین
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserDeleteAdviserIdReplaceByDelete(adviserId: number, replaceBy: number, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary فراموشی رمز عبور
     * @param {ForgetPasswordDto} [forgetPasswordDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserForgetPasswordPost(forgetPasswordDto?: ForgetPasswordDto, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary ورود
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): AxiosPromise<LoginResultDto>;

    /**
     * 
     * @summary ورود با کیو آر کد
     * @param {string} qrCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserLoginQrCodePost(qrCode: string, options?: AxiosRequestConfig): AxiosPromise<LoginResultDto>;

    /**
     * 
     * @summary پروفایل مشاور
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserProfileGet(options?: AxiosRequestConfig): AxiosPromise<AdviserToReturnDtoResultSET>;

    /**
     * 
     * @summary ویرایش پروفایل مشاور
     * @param {string} [name] نام مشاور
     * @param {any} [profile] تصویر مشاور آژانس
     * @param {string} [email] ایمیل
     * @param {string} [ncode] کدملی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserProfilePut(name?: string, profile?: any, email?: string, ncode?: string, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary تایید شماره موبایل مشاور ثبت نام شده
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAdviserVerifyMobilePost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary لیست فعالیت های آژانس
     * @param {number} [loggerId] logger id
     * @param {Array<string>} [logNames] فعالیت ها
     * @param {string} [fromDt] از تاریخ
     * @param {string} [toDt] تا تاریخ
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyActivitiesGet(loggerId?: number, logNames?: Array<string>, fromDt?: string, toDt?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<AgencyActivityToReturnDtoPagedListResultSET>;

    /**
     * 
     * @summary نوع فعالیت
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyActivitiesLogNamesGet(options?: AxiosRequestConfig): AxiosPromise<Array<string>>;

    /**
     * 
     * @summary لیست مشاوران آژانس
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyAdviserListGet(options?: AxiosRequestConfig): AxiosPromise<Array<AdviserToReturnDto>>;

    /**
     * 
     * @summary ثبت نام مشاور توسط آژانس
     * @param {AdviserByAgencyForCreateDto} [adviserByAgencyForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyAdviserPost(adviserByAgencyForCreateDto?: AdviserByAgencyForCreateDto, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary ویرایش پروفایل مشاور توسط مدیر آژانس
     * @param {number} [adviserId] 
     * @param {string} [name] نام مشاور
     * @param {any} [profile] تصویر مشاور آژانس
     * @param {string} [email] ایمیل
     * @param {string} [ncode] کدملی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyAdviserProfilePut(adviserId?: number, name?: string, profile?: any, email?: string, ncode?: string, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary تکمیل ثبت نام مشاور
     * @param {string} [name] نام مشاور
     * @param {string} [nCode] سه رقم آخر کد ملی
     * @param {string} [password] رمز
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyAdviserRegisterPut(name?: string, nCode?: string, password?: string, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary آمار آگهی های آژانس در بازه های مختلف ماهانه
     * @param {number} [fromMonthsAgo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyAnalyticsAdCountGet(fromMonthsAgo?: number, options?: AxiosRequestConfig): AxiosPromise<Array<AgencyAdStatics>>;

    /**
     * 
     * @summary آمار بازدید آگهی های آژانس
     * @param {number} [fromDaysAgo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyAnalyticsAdHitsGet(fromDaysAgo?: number, options?: AxiosRequestConfig): AxiosPromise<Array<StringDecimalKeyValuePair>>;

    /**
     * 
     * @summary آیا آژانس تایید شده است
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyCheckGet(options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary قرارداد فعال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyContractGet(options?: AxiosRequestConfig): AxiosPromise<ContractToReturnDtoResultSET>;

    /**
     * 
     * @summary ثبت اطلاعات تکمیلی آژانس
     * @param {AgencyDocumentForCreateDto} [agencyDocumentForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyDocumentPost(agencyDocumentForCreateDto?: AgencyDocumentForCreateDto, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary لیست تمامی پیام های آژانس
     * @param {'Seen' | 'UnSeen'} [messageStatus] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyMessageGet(messageStatus?: 'Seen' | 'UnSeen', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): AxiosPromise<AgencyMessageToReturnDtoPagedListResultSET>;

    /**
     * 
     * @summary دریافت یک پیام
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyMessageMessageIdGet(messageId: number, options?: AxiosRequestConfig): AxiosPromise<AgencyMessageToReturnDto>;

    /**
     * 
     * @summary ثبت خواندن پیام
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyMessageMessageIdSeenPut(messageId: number, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary تعداد پیام های خوانده نشده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyMessagesUnSeenCountGet(options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary لیست محلات من
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyNeighborhoodsGet(options?: AxiosRequestConfig): AxiosPromise<Array<NeighbourhoodDto>>;

    /**
     * 
     * @summary ثبت نام آژانس و مالک
     * @param {number} cityId 
     * @param {string} agencyName 
     * @param {string} agencyPhone 
     * @param {string} adviserName 
     * @param {string} adviserMobile 
     * @param {string} nationalCode 
     * @param {string} password 
     * @param {string} [email] 
     * @param {any} [agencyProfilePhoto] 
     * @param {any} [adviserProfilePhoto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyPost(cityId: number, agencyName: string, agencyPhone: string, adviserName: string, adviserMobile: string, nationalCode: string, password: string, email?: string, agencyProfilePhoto?: any, adviserProfilePhoto?: any, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary ویرایش پروفایل آژانس
     * @param {number} [cityId] رفرنس به شهر
     * @param {string} [name] نام آژانس
     * @param {string} [phone] شماره ثابت
     * @param {any} [logo] تصویر آژانس
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateAgencyProfilePut(cityId?: number, name?: string, phone?: string, logo?: any, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary دانلود اخرین نسخه اپ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateApkLatestVersionGet(options?: AxiosRequestConfig): AxiosPromise<ApkToReturnDto>;

    /**
     * 
     * @summary اضافه کردن لیستی از آموزش ها
     * @param {Array<HelpForCreationDto>} [helpForCreationDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateHelpAddPost(helpForCreationDto?: Array<HelpForCreationDto>, options?: AxiosRequestConfig): AxiosPromise<StringResultSET>;

    /**
     * 
     * @summary لیست آموزش های اپ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateHelpGet(options?: AxiosRequestConfig): AxiosPromise<Array<HelpDto>>;

    /**
     * 
     * @summary افزودن محله
     * @param {NeighbourhoodForCreateDto} [neighbourhoodForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateNeighbourhoodPost(neighbourhoodForCreateDto?: NeighbourhoodForCreateDto, options?: AxiosRequestConfig): AxiosPromise<NeighbourhoodDto>;

    /**
     * 
     * @summary Test Redis
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateRedisTestPost(firstName?: string, lastName?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary Test Redis
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApiInterface
     */
    apiRealStateRedistGetGet(key?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * RealStateApi - object-oriented interface
 * @export
 * @class RealStateApi
 * @extends {BaseAPI}
 */
export class RealStateApi extends BaseAPI implements RealStateApiInterface {
    /**
     * 
     * @summary آمار آگهی
     * @param {'sell' | 'let'} adType 
     * @param {number} adId 
     * @param {string} [fromDt] 
     * @param {string} [toDt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsAnalyticsAdTypeAdIdGet(adType: 'sell' | 'let', adId: number, fromDt?: string, toDt?: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsAnalyticsAdTypeAdIdGet(adType, adId, fromDt, toDt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعیین تصویر اصلی ساختمان
     * @param {number} buildingId 
     * @param {string} photo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch(buildingId: number, photo: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsBuildingBuildingIdPhotoPhotoMainPatch(buildingId, photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف تصویر از ساختمان
     * @param {number} [buildingId] 
     * @param {string} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsBuildingPhotoDelete(buildingId?: number, photo?: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsBuildingPhotoDelete(buildingId, photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary افزودن تصویر به ساختمان
     * @param {number} buildingId کد ساختمان
     * @param {any} photo تصویر
     * @param {boolean} isMainPhoto تصویر اصلی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsBuildingPhotoPut(buildingId: number, photo: any, isMainPhoto: boolean, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsBuildingPhotoPut(buildingId, photo, isMainPhoto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تغییر نوع انتشار آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsChangePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsChangePublishPut(adId, adType, publishType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف آگهی
     * @param {number} adId 
     * @param {'sell' | 'let'} [adType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsDeleteAdIdDelete(adId: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsDeleteAdIdDelete(adId, adType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف گروهی آگهی ها
     * @param {'sell' | 'let'} [adType] 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsDeleteDelete(adType?: 'sell' | 'let', requestBody?: Array<number>, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsDeleteDelete(adType, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ویرایش آگهی های اجاره
     * @param {number} adId 
     * @param {LetForCreateDto} [letForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsEditLetAdIdPut(adId: number, letForCreateDto?: LetForCreateDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsEditLetAdIdPut(adId, letForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ویرایش آگهی های فروش
     * @param {number} adId 
     * @param {SellForCreateDto} [sellForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsEditSellAdIdPut(adId: number, sellForCreateDto?: SellForCreateDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsEditSellAdIdPut(adId, sellForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار بازدید و کلیک(تعداد)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsHitsCountGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsHitsCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست اگهی های اجاره من
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {string} [query] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsLetGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsLetGet(status, publishType, query, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت اگهی اجاره
     * @param {LetForCreateDto} [letForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsLetPost(letForCreateDto?: LetForCreateDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsLetPost(letForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل آگهی های اجاره مشاور
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsLetStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsLetStatusCountGet(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary انتشار آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsPublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsPublishPut(adId, adType, publishType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary بازنشر آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsRePublishPut(adId?: number, adType?: 'sell' | 'let', publishType?: 'simple' | 'occasion' | 'featured', options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsRePublishPut(adId, adType, publishType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آگهی های فروش من
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} [status] 
     * @param {'simple' | 'occasion' | 'featured'} [publishType] 
     * @param {string} [query] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsSellGet(status?: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', publishType?: 'simple' | 'occasion' | 'featured', query?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsSellGet(status, publishType, query, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت آگهی فروش
     * @param {SellForCreateDto} [sellForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsSellPost(sellForCreateDto?: SellForCreateDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsSellPost(sellForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد کل آگهی های فروش مشاور
     * @param {'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed'} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsSellStatusCountGet(status: 'not_verified' | 'local' | 'pending' | 'published' | 'skip' | 'traded' | 'canceled' | 'removed', options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsSellStatusCountGet(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لغو انتشار آگهی
     * @param {number} [adId] 
     * @param {'sell' | 'let'} [adType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdsUnPublishPut(adId?: number, adType?: 'sell' | 'let', options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdsUnPublishPut(adId, adType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار درخواست شماره تلفن مشاور جهت نمودار
     * @param {number} adviserId 
     * @param {number} [fromMonthsAgo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet(adviserId: number, fromMonthsAgo?: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserAdviserIdAnalyticsPhoneReqGet(adviserId, fromMonthsAgo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تغییر رمز
     * @param {ChangePasswordDto} [changePasswordDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserChangePasswordPost(changePasswordDto?: ChangePasswordDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserChangePasswordPost(changePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف مشاور
     * @param {number} adviserId کد مشاوری که قرار است حذف شود
     * @param {number} replaceBy کد مشاور جایگزین
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserDeleteAdviserIdReplaceByDelete(adviserId: number, replaceBy: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserDeleteAdviserIdReplaceByDelete(adviserId, replaceBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary فراموشی رمز عبور
     * @param {ForgetPasswordDto} [forgetPasswordDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserForgetPasswordPost(forgetPasswordDto?: ForgetPasswordDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserForgetPasswordPost(forgetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ورود
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserLoginPost(userForLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ورود با کیو آر کد
     * @param {string} qrCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserLoginQrCodePost(qrCode: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserLoginQrCodePost(qrCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary پروفایل مشاور
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserProfileGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ویرایش پروفایل مشاور
     * @param {string} [name] نام مشاور
     * @param {any} [profile] تصویر مشاور آژانس
     * @param {string} [email] ایمیل
     * @param {string} [ncode] کدملی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserProfilePut(name?: string, profile?: any, email?: string, ncode?: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserProfilePut(name, profile, email, ncode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تایید شماره موبایل مشاور ثبت نام شده
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAdviserVerifyMobilePost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAdviserVerifyMobilePost(userForLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست فعالیت های آژانس
     * @param {number} [loggerId] logger id
     * @param {Array<string>} [logNames] فعالیت ها
     * @param {string} [fromDt] از تاریخ
     * @param {string} [toDt] تا تاریخ
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyActivitiesGet(loggerId?: number, logNames?: Array<string>, fromDt?: string, toDt?: string, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyActivitiesGet(loggerId, logNames, fromDt, toDt, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary نوع فعالیت
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyActivitiesLogNamesGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyActivitiesLogNamesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست مشاوران آژانس
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyAdviserListGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyAdviserListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت نام مشاور توسط آژانس
     * @param {AdviserByAgencyForCreateDto} [adviserByAgencyForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyAdviserPost(adviserByAgencyForCreateDto?: AdviserByAgencyForCreateDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyAdviserPost(adviserByAgencyForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ویرایش پروفایل مشاور توسط مدیر آژانس
     * @param {number} [adviserId] 
     * @param {string} [name] نام مشاور
     * @param {any} [profile] تصویر مشاور آژانس
     * @param {string} [email] ایمیل
     * @param {string} [ncode] کدملی
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyAdviserProfilePut(adviserId?: number, name?: string, profile?: any, email?: string, ncode?: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyAdviserProfilePut(adviserId, name, profile, email, ncode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تکمیل ثبت نام مشاور
     * @param {string} [name] نام مشاور
     * @param {string} [nCode] سه رقم آخر کد ملی
     * @param {string} [password] رمز
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyAdviserRegisterPut(name?: string, nCode?: string, password?: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyAdviserRegisterPut(name, nCode, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار آگهی های آژانس در بازه های مختلف ماهانه
     * @param {number} [fromMonthsAgo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyAnalyticsAdCountGet(fromMonthsAgo?: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyAnalyticsAdCountGet(fromMonthsAgo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آمار بازدید آگهی های آژانس
     * @param {number} [fromDaysAgo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyAnalyticsAdHitsGet(fromDaysAgo?: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyAnalyticsAdHitsGet(fromDaysAgo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary آیا آژانس تایید شده است
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyCheckGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قرارداد فعال
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyContractGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyContractGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت اطلاعات تکمیلی آژانس
     * @param {AgencyDocumentForCreateDto} [agencyDocumentForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyDocumentPost(agencyDocumentForCreateDto?: AgencyDocumentForCreateDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyDocumentPost(agencyDocumentForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست تمامی پیام های آژانس
     * @param {'Seen' | 'UnSeen'} [messageStatus] 
     * @param {number} [currentPage] صفحه جاری
     * @param {number} [pageSize] تعداد رکورد در هر صفحه
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyMessageGet(messageStatus?: 'Seen' | 'UnSeen', currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyMessageGet(messageStatus, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary دریافت یک پیام
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyMessageMessageIdGet(messageId: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyMessageMessageIdGet(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت خواندن پیام
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyMessageMessageIdSeenPut(messageId: number, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyMessageMessageIdSeenPut(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعداد پیام های خوانده نشده
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyMessagesUnSeenCountGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyMessagesUnSeenCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست محلات من
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyNeighborhoodsGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyNeighborhoodsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ثبت نام آژانس و مالک
     * @param {number} cityId 
     * @param {string} agencyName 
     * @param {string} agencyPhone 
     * @param {string} adviserName 
     * @param {string} adviserMobile 
     * @param {string} nationalCode 
     * @param {string} password 
     * @param {string} [email] 
     * @param {any} [agencyProfilePhoto] 
     * @param {any} [adviserProfilePhoto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyPost(cityId: number, agencyName: string, agencyPhone: string, adviserName: string, adviserMobile: string, nationalCode: string, password: string, email?: string, agencyProfilePhoto?: any, adviserProfilePhoto?: any, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyPost(cityId, agencyName, agencyPhone, adviserName, adviserMobile, nationalCode, password, email, agencyProfilePhoto, adviserProfilePhoto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ویرایش پروفایل آژانس
     * @param {number} [cityId] رفرنس به شهر
     * @param {string} [name] نام آژانس
     * @param {string} [phone] شماره ثابت
     * @param {any} [logo] تصویر آژانس
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateAgencyProfilePut(cityId?: number, name?: string, phone?: string, logo?: any, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateAgencyProfilePut(cityId, name, phone, logo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary دانلود اخرین نسخه اپ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateApkLatestVersionGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateApkLatestVersionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary اضافه کردن لیستی از آموزش ها
     * @param {Array<HelpForCreationDto>} [helpForCreationDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateHelpAddPost(helpForCreationDto?: Array<HelpForCreationDto>, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateHelpAddPost(helpForCreationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لیست آموزش های اپ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateHelpGet(options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateHelpGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary افزودن محله
     * @param {NeighbourhoodForCreateDto} [neighbourhoodForCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateNeighbourhoodPost(neighbourhoodForCreateDto?: NeighbourhoodForCreateDto, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateNeighbourhoodPost(neighbourhoodForCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test Redis
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateRedisTestPost(firstName?: string, lastName?: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateRedisTestPost(firstName, lastName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test Redis
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStateApi
     */
    public apiRealStateRedistGetGet(key?: string, options?: AxiosRequestConfig) {
        return RealStateApiFp(this.configuration).apiRealStateRedistGetGet(key, options).then((request) => request(this.axios, this.basePath));
    }
}
